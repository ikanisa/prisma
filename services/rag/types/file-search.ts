/**
 * Type definitions for OpenAI File Search Tool
 * Based on OpenAI Responses API documentation
 */

/**
 * Metadata filter configuration for file search
 * Filters search results based on file metadata attributes
 */
export interface FileSearchFilter {
  /** Filter type - 'eq' for equals, 'in' for one of multiple values */
  type: 'eq' | 'in';
  /** Metadata key to filter on (e.g., 'category', 'department') */
  key: string;
  /** Value or array of values to match */
  value: string | string[];
}

/**
 * File search tool configuration for the Responses API
 */
export interface FileSearchTool {
  /** Tool type identifier */
  type: 'file_search';
  /** Array of vector store IDs to search */
  vector_store_ids: string[];
  /** Optional: maximum number of search results to return (default varies by model) */
  max_num_results?: number;
  /** Optional: metadata filters to narrow search scope */
  filters?: FileSearchFilter;
}

/**
 * File citation annotation in response content
 */
export interface FileCitationAnnotation {
  type: 'file_citation';
  /** Character index where the citation starts in the text */
  index: number;
  /** ID of the file being cited */
  file_id: string;
  /** Filename of the cited file */
  filename: string;
  /** Optional: specific quote or excerpt from the file */
  quote?: string;
}

/**
 * Text content with file citation annotations
 */
export interface AnnotatedFileContent {
  type: 'output_text' | 'text';
  /** The text content */
  text: string;
  /** Inline file citation annotations */
  annotations?: FileCitationAnnotation[];
}

/**
 * Individual search result from file search call
 */
export interface FileSearchResultItem {
  /** Unique identifier for this result */
  id?: string;
  /** Relevance score (0-1 range) */
  score?: number;
  /** Text content/snippet from the file */
  content?: string;
  /** File ID */
  file_id?: string;
  /** Filename */
  filename?: string;
  /** Additional metadata */
  metadata?: Record<string, unknown>;
}

/**
 * File search call output item with execution details
 */
export interface FileSearchCallItem {
  type: 'file_search_call';
  /** Unique identifier for the search call */
  id: string;
  /** Status of the file search call */
  status: 'in_progress' | 'completed' | 'cancelled' | 'failed';
  /** Search queries issued during this call */
  queries?: string[];
  /** Search results (only included if requested via 'include' parameter) */
  search_results?: FileSearchResultItem[] | null;
}

/**
 * Message item with file search results and citations
 */
export interface MessageItemWithFileCitations {
  id: string;
  type: 'message';
  status: 'in_progress' | 'completed' | 'cancelled' | 'failed';
  role: 'assistant' | 'user' | 'system';
  /** Content array with text and file citations */
  content: AnnotatedFileContent[];
}

/**
 * Response output that may include file search calls and messages with citations
 */
export interface FileSearchResponse {
  /** Response ID */
  id?: string;
  /** Array of output items including file search calls and messages */
  output?: Array<FileSearchCallItem | MessageItemWithFileCitations | Record<string, unknown>>;
  /** Alternative: direct output text (for some response formats) */
  output_text?: string;
  /** Alternative: file_search_calls array (flattened format) */
  file_search_calls?: FileSearchCallItem[];
  /** Usage information (tokens consumed, etc.) */
  usage?: Record<string, unknown>;
  /** Additional response properties */
  [key: string]: unknown;
}

/**
 * File search request payload for Responses API
 */
export interface FileSearchRequestPayload {
  /** Model to use (e.g., 'gpt-4.1', 'gpt-4.1-mini') */
  model: string;
  /** Input prompt or messages */
  input: string | Array<{ role: string; content: string }>;
  /** Array of tools including file search */
  tools: Array<FileSearchTool | Record<string, unknown>>;
  /** Optional: response format configuration */
  response_format?: { type: 'json_object' | 'text' };
  /** Optional: include specific fields in response (e.g., ['file_search_call.results']) */
  include?: string[];
  /** Optional: reasoning configuration for reasoning models */
  reasoning?: { effort: 'minimal' | 'low' | 'medium' | 'high' };
  /** Optional: text verbosity configuration */
  text?: { verbosity: 'low' | 'medium' | 'high' };
  /** Additional request properties */
  [key: string]: unknown;
}

/**
 * Extracted file search results for API responses
 */
export interface ExtractedFileSearchResults {
  /** The answer text generated by the model */
  answer: string;
  /** File citations extracted from the response */
  citations: FileCitationAnnotation[];
  /** Raw search results (if included in response) */
  results?: FileSearchResultItem[];
  /** Usage information */
  usage?: Record<string, unknown>;
}

/**
 * Supported file formats for file search
 */
export const SUPPORTED_FILE_FORMATS = {
  // Text files
  '.c': 'text/x-c',
  '.cpp': 'text/x-c++',
  '.cs': 'text/x-csharp',
  '.css': 'text/css',
  '.go': 'text/x-golang',
  '.html': 'text/html',
  '.java': 'text/x-java',
  '.js': 'text/javascript',
  '.json': 'application/json',
  '.md': 'text/markdown',
  '.php': 'text/x-php',
  '.py': 'text/x-python',
  '.rb': 'text/x-ruby',
  '.sh': 'application/x-sh',
  '.tex': 'text/x-tex',
  '.ts': 'application/typescript',
  '.txt': 'text/plain',
  // Documents
  '.doc': 'application/msword',
  '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
  '.pdf': 'application/pdf',
  '.pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
} as const;

/**
 * Type guard to check if a value is a FileSearchTool
 */
export function isFileSearchTool(tool: unknown): tool is FileSearchTool {
  return (
    typeof tool === 'object' &&
    tool !== null &&
    'type' in tool &&
    tool.type === 'file_search' &&
    'vector_store_ids' in tool &&
    Array.isArray((tool as FileSearchTool).vector_store_ids)
  );
}

/**
 * Type guard to check if a value is a FileSearchCallItem
 */
export function isFileSearchCallItem(item: unknown): item is FileSearchCallItem {
  return (
    typeof item === 'object' &&
    item !== null &&
    'type' in item &&
    item.type === 'file_search_call'
  );
}

/**
 * Type guard to check if annotation is a file citation
 */
export function isFileCitationAnnotation(annotation: unknown): annotation is FileCitationAnnotation {
  return (
    typeof annotation === 'object' &&
    annotation !== null &&
    'type' in annotation &&
    annotation.type === 'file_citation'
  );
}
