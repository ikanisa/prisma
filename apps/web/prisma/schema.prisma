// Prisma schema aligning with the Supabase Postgres schema
// The datasource uses DATABASE_URL / DIRECT_URL environment variables configured in CI and the hosting platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

enum RoleLevel {
  EMPLOYEE
  MANAGER
  SYSTEM_ADMIN

  @@map("role_level")
}

enum Dac6HallmarkCategory {
  A
  B
  C
  D
  E

  @@map("dac6_hallmark_category")
}

enum Dac6SubmissionStatus {
  DRAFT
  READY_FOR_SUBMISSION
  SUBMITTED
  REJECTED

  @@map("dac6_submission_status")
}

enum TaxDisputeStatus {
  OPEN
  IN_PROGRESS
  SUBMITTED
  RESOLVED
  CLOSED

  @@map("tax_dispute_status")
}

enum UsOverlayType {
  GILTI
  _163J @map("163J")
  CAMT
  EXCISE_4501

  @@map("us_overlay_type")
}

model User {
  id            String   @id @db.Uuid
  email         String   @unique
  name          String?
  avatarUrl     String?  @map("avatar_url")
  isSystemAdmin Boolean  @default(false) @map("is_system_admin")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  memberships   Membership[]
  documents     Document[]     @relation("UploadedByUser")
  notifications Notification[]
  activityLogs  ActivityLog[]
  agentSessions AgentSession[]
  accounting    Accounting[]   @relation("AccountingCreatedBy")
  Audit         Audit[]
  analyticsEvents AnalyticsEvent[] @relation("AnalyticsActor")

  @@map("users")
}

model Organization {
  id             String   @id @db.Uuid
  name           String
  slug           String   @unique
  brandPrimary   String?  @default("#6366f1") @map("brand_primary")
  brandSecondary String?  @default("#8b5cf6") @map("brand_secondary")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  memberships   Membership[]
  clients       Client[]
  engagements   Engagement[]
  tasks         Task[]
  documents     Document[]
  notifications Notification[]
  activityLogs  ActivityLog[]
  agentSessions AgentSession[]
  audits        Audit[]
  accounting    Accounting[]   @relation("AccountingOrganization")
  taxRules      Tax[]
  analyticsEvents AnalyticsEvent[]

  @@map("organizations")
}

model Membership {
  id        String    @id @db.Uuid
  orgId     String    @map("org_id") @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  role      RoleLevel @default(EMPLOYEE)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)

  organization Organization @relation(fields: [orgId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@unique([orgId, userId])
  @@map("memberships")
}

model Client {
  id            String   @id @db.Uuid
  orgId         String   @map("org_id") @db.Uuid
  name          String
  contactName   String?  @map("contact_name")
  email         String?
  phone         String?
  country       String?
  industry      String?
  fiscalYearEnd String?  @map("fiscal_year_end")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  organization Organization @relation(fields: [orgId], references: [id])
  engagements  Engagement[]

  @@map("clients")
}

model Engagement {
  id          String    @id @db.Uuid
  orgId       String    @map("org_id") @db.Uuid
  clientId    String    @map("client_id") @db.Uuid
  title       String
  description String?
  status      String?   @default("active")
  startDate   DateTime? @map("start_date") @db.Date
  endDate     DateTime? @map("end_date") @db.Date
  budget      Decimal?  @db.Decimal(10, 2)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)

  organization Organization @relation(fields: [orgId], references: [id])
  client       Client       @relation(fields: [clientId], references: [id])
  tasks        Task[]
  documents    Document[]

  @@map("engagements")
}

model Task {
  id           String    @id @db.Uuid
  orgId        String    @map("org_id") @db.Uuid
  engagementId String?   @map("engagement_id") @db.Uuid
  title        String
  description  String?
  status       String?   @default("pending")
  priority     String?   @default("medium")
  assignedTo   String?   @map("assigned_to") @db.Uuid
  dueDate      DateTime? @map("due_date") @db.Date
  completedAt  DateTime? @map("completed_at") @db.Timestamptz(6)
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)

  organization Organization @relation(fields: [orgId], references: [id])
  engagement   Engagement?  @relation(fields: [engagementId], references: [id])
  documents    Document[]

  @@map("tasks")
}

model Document {
  id           String   @id @db.Uuid
  orgId        String   @map("org_id") @db.Uuid
  engagementId String?  @map("engagement_id") @db.Uuid
  taskId       String?  @map("task_id") @db.Uuid
  name         String
  filePath     String?  @map("file_path")
  fileSize     Int?     @map("file_size")
  fileType     String?  @map("file_type")
  uploadedById String   @map("uploaded_by") @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  organization Organization @relation(fields: [orgId], references: [id])
  engagement   Engagement?  @relation(fields: [engagementId], references: [id])
  task         Task?        @relation(fields: [taskId], references: [id])
  uploadedBy   User         @relation("UploadedByUser", fields: [uploadedById], references: [id])

  @@map("documents")
}

model Notification {
  id        String   @id @db.Uuid
  orgId     String   @map("org_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  title     String
  message   String?
  type      String?  @default("info")
  read      Boolean? @default(false)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  organization Organization @relation(fields: [orgId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model ActivityLog {
  id         String   @id @db.Uuid
  orgId      String   @map("org_id") @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  action     String
  entityType String?  @map("entity_type")
  entityId   String?  @map("entity_id") @db.Uuid
  metadata   Json?
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  organization Organization @relation(fields: [orgId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@map("activity_log")
}

model AgentSession {
  id        String                 @id @db.Uuid
  orgId     String                 @map("org_id") @db.Uuid
  userId    String?                @map("user_id") @db.Uuid
  input     String?
  output    String?
  embedding Unsupported("vector")?
  metadata  Json?
  createdAt DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime               @default(now()) @map("updated_at") @db.Timestamptz(6)

  organization Organization @relation(fields: [orgId], references: [id])
  user         User?        @relation(fields: [userId], references: [id])

  @@map("agent_sessions")
}

model Audit {
  id        String   @id @db.Uuid
  orgId     String   @map("org_id") @db.Uuid
  actorId   String?  @map("actor_id") @db.Uuid
  action    String
  tableName String?  @map("table_name")
  recordId  String?  @map("record_id") @db.Uuid
  oldData   Json?    @map("old_data")
  newData   Json?    @map("new_data")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  organization Organization @relation(fields: [orgId], references: [id])
  actor        User?        @relation(fields: [actorId], references: [id])

  @@map("audit")
}

model Accounting {
  id          String   @id @db.Uuid
  orgId       String   @map("org_id") @db.Uuid
  entryType   String   @map("entry_type")
  amount      Decimal  @db.Decimal(12, 2)
  description String?
  createdById String?  @map("created_by") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  organization Organization @relation("AccountingOrganization", fields: [orgId], references: [id])
  createdBy    User?        @relation("AccountingCreatedBy", fields: [createdById], references: [id])

  @@map("accounting")
}

model Tax {
  id            String   @id @db.Uuid
  orgId         String?  @map("org_id") @db.Uuid
  jurisdiction  String
  rule          String
  rate          Decimal  @db.Decimal(5, 2)
  reverseCharge Boolean? @default(false) @map("reverse_charge")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  organization Organization? @relation(fields: [orgId], references: [id])

  @@map("tax")
}

model TelemetryServiceLevel {
  id           String   @id @db.Uuid
  orgId        String?  @map("org_id") @db.Uuid
  module       String
  workflowEvent String  @map("workflow_event")
  targetHours  Int      @map("target_hours")
  breaches     Int      @default(0)
  lastBreachAt DateTime? @map("last_breach_at") @db.Timestamptz(6)
  openBreaches Int      @default(0) @map("open_breaches")
  status       String   @default("ON_TRACK")
  computedAt   DateTime @default(now()) @map("computed_at") @db.Timestamptz(6)

  organization Organization? @relation(fields: [orgId], references: [id])

  @@index([orgId, module], map: "idx_telemetry_sla_org_module")
  @@map("telemetry_service_levels")
}

model TelemetryCoverageMetric {
  id            String   @id @db.Uuid
  orgId         String?  @map("org_id") @db.Uuid
  module        String
  metric        String
  measuredValue Decimal  @map("measured_value") @db.Decimal(18, 2)
  population    Decimal  @db.Decimal(18, 2)
  coverageRatio Decimal  @map("coverage_ratio") @db.Decimal(6, 3)
  periodStart   DateTime @map("period_start") @db.Date
  periodEnd     DateTime @map("period_end") @db.Date
  computedAt    DateTime @default(now()) @map("computed_at") @db.Timestamptz(6)

  organization Organization? @relation(fields: [orgId], references: [id])

  @@index([orgId, module], map: "idx_telemetry_coverage_org_module")
  @@map("telemetry_coverage_metrics")
}

model TelemetryRefusalEvent {
  id        String   @id @db.Uuid
  orgId     String?  @map("org_id") @db.Uuid
  module    String
  event     String
  reason    String?
  severity  String?  @default("INFO")
  count     Int      @default(1)
  occurredAt DateTime @default(now()) @map("occurred_at") @db.Timestamptz(6)

  organization Organization? @relation(fields: [orgId], references: [id])

  @@index([orgId, module], map: "idx_telemetry_refusal_org_module")
  @@map("telemetry_refusal_events")
}

model OpenAiDebugEvent {
  id         String   @id @db.Uuid
  requestId  String   @map("request_id")
  modelName  String?  @map("model")
  endpoint   String
  statusCode Int?     @map("status_code")
  orgId      String?  @map("org_id") @db.Uuid
  metadata   Json     @default("{}")
  debug      Json?
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  organization Organization? @relation(fields: [orgId], references: [id])

  @@unique([requestId], map: "uq_openai_debug_request_id")
  @@map("openai_debug_events")
}

model AnalyticsEvent {
  id         String    @id @db.Uuid
  event      String
  service    String?
  source     String
  orgId      String?   @map("org_id") @db.Uuid
  actorId    String?   @map("actor_id") @db.Uuid
  properties Json      @default("{}")
  tags       String[]  @db.TextArray
  context    Json      @default("{}")
  metadata   Json      @default("{}")
  occurredAt DateTime  @default(now()) @map("occurred_at") @db.Timestamptz(6)
  ingestedAt DateTime  @default(now()) @map("ingested_at") @db.Timestamptz(6)

  organization Organization? @relation(fields: [orgId], references: [id])
  actor        User?         @relation("AnalyticsActor", fields: [actorId], references: [id])

  @@index([orgId, event], map: "idx_analytics_events_org_event")
  @@index([occurredAt], map: "idx_analytics_events_occurred_at")
  @@map("analytics_events")
}

model NidComputation {
  id                           String   @id @db.Uuid
  orgId                        String   @map("org_id") @db.Uuid
  taxEntityId                  String   @map("tax_entity_id") @db.Uuid
  period                       String
  equityBase                   Decimal  @map("equity_base") @db.Decimal(18, 2)
  riskFreeRate                 Decimal  @map("risk_free_rate") @db.Decimal(10, 6)
  riskPremium                  Decimal  @map("risk_premium") @db.Decimal(10, 6)
  referenceRate                Decimal  @map("reference_rate") @db.Decimal(10, 6)
  priorDeduction               Decimal  @map("prior_deduction") @db.Decimal(18, 2)
  chargeableIncomeBeforeNid    Decimal? @map("chargeable_income_before_nid") @db.Decimal(18, 2)
  capRatio                     Decimal  @map("cap_ratio") @db.Decimal(5, 4)
  grossDeduction               Decimal  @map("gross_deduction") @db.Decimal(18, 2)
  cappedDeduction              Decimal  @map("capped_deduction") @db.Decimal(18, 2)
  deductionAfterCarryforward   Decimal  @map("deduction_after_carryforward") @db.Decimal(18, 2)
  adjustmentAmount             Decimal  @map("adjustment_amount") @db.Decimal(18, 2)
  notes                        String?
  createdBy                    String?  @map("created_by") @db.Uuid
  updatedBy                    String?  @map("updated_by") @db.Uuid
  createdAt                    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                    DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@index([orgId, taxEntityId, period], map: "idx_nid_computations_org_period")
  @@map("nid_computations")
}

model PatentBoxComputation {
  id                     String   @id @db.Uuid
  orgId                  String   @map("org_id") @db.Uuid
  taxEntityId            String   @map("tax_entity_id") @db.Uuid
  period                 String
  qualifyingIpIncome     Decimal  @map("qualifying_ip_income") @db.Decimal(18, 2)
  qualifyingExpenditure  Decimal  @map("qualifying_expenditure") @db.Decimal(18, 2)
  overallExpenditure     Decimal  @map("overall_expenditure") @db.Decimal(18, 2)
  routineReturnRate      Decimal  @map("routine_return_rate") @db.Decimal(10, 6)
  upliftCap              Decimal  @map("uplift_cap") @db.Decimal(10, 6)
  deductionRate          Decimal  @map("deduction_rate") @db.Decimal(10, 6)
  routineReturn          Decimal  @map("routine_return") @db.Decimal(18, 2)
  uplift                 Decimal  @db.Decimal(18, 2)
  nexusFraction          Decimal  @map("nexus_fraction") @db.Decimal(10, 6)
  deductionBase          Decimal  @map("deduction_base") @db.Decimal(18, 2)
  deductionAmount        Decimal  @map("deduction_amount") @db.Decimal(18, 2)
  adjustmentAmount       Decimal  @map("adjustment_amount") @db.Decimal(18, 2)
  notes                  String?
  createdBy              String?  @map("created_by") @db.Uuid
  updatedBy              String?  @map("updated_by") @db.Uuid
  createdAt              DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt              DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@index([orgId, taxEntityId, period], map: "idx_patent_box_computations_org_period")
  @@map("patent_box_computations")
}

model InterestLimitationComputation {
  id                          String   @id @db.Uuid
  orgId                       String   @map("org_id") @db.Uuid
  taxEntityId                 String   @map("tax_entity_id") @db.Uuid
  period                      String
  exceedingBorrowingCosts     Decimal  @map("exceeding_borrowing_costs") @db.Decimal(18, 2)
  taxEbitda                   Decimal  @map("tax_ebitda") @db.Decimal(18, 2)
  standaloneAllowance         Decimal  @map("standalone_allowance") @db.Decimal(18, 2)
  safeHarbourAmount           Decimal  @map("safe_harbour_amount") @db.Decimal(18, 2)
  carryforwardInterest        Decimal  @map("carryforward_interest") @db.Decimal(18, 2)
  carryforwardCapacity        Decimal  @map("carryforward_capacity") @db.Decimal(18, 2)
  disallowedCarryforward      Decimal  @map("disallowed_carryforward") @db.Decimal(18, 2)
  allowedInterest             Decimal  @map("allowed_interest") @db.Decimal(18, 2)
  disallowedInterest          Decimal  @map("disallowed_interest") @db.Decimal(18, 2)
  updatedCarryforwardInterest Decimal  @map("updated_carryforward_interest") @db.Decimal(18, 2)
  updatedCarryforwardCapacity Decimal  @map("updated_carryforward_capacity") @db.Decimal(18, 2)
  adjustmentAmount            Decimal  @map("adjustment_amount") @db.Decimal(18, 2)
  notes                       String?
  createdBy                   String?  @map("created_by") @db.Uuid
  updatedBy                   String?  @map("updated_by") @db.Uuid
  createdAt                   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                   DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@index([orgId, taxEntityId, period], map: "idx_interest_limitation_org_period")
  @@map("interest_limitation_computations")
}

model CfcInclusion {
  id                         String   @id @db.Uuid
  orgId                      String   @map("org_id") @db.Uuid
  taxEntityId                String   @map("tax_entity_id") @db.Uuid
  period                     String
  cfcEntityName              String?  @map("cfc_entity_name")
  cfcProfit                  Decimal  @map("cfc_profit") @db.Decimal(18, 2)
  foreignTaxPaid             Decimal  @map("foreign_tax_paid") @db.Decimal(18, 2)
  foreignRate                Decimal  @map("foreign_rate") @db.Decimal(10, 6)
  domesticRate               Decimal  @map("domestic_rate") @db.Decimal(10, 6)
  participationPercentage    Decimal  @map("participation_percentage") @db.Decimal(5, 4)
  profitAttributionRatio     Decimal  @map("profit_attribution_ratio") @db.Decimal(5, 4)
  inclusionAmount            Decimal  @map("inclusion_amount") @db.Decimal(18, 2)
  taxCreditEligible          Decimal  @map("tax_credit_eligible") @db.Decimal(18, 2)
  adjustmentAmount           Decimal  @map("adjustment_amount") @db.Decimal(18, 2)
  notes                      String?
  createdBy                  String?  @map("created_by") @db.Uuid
  updatedBy                  String?  @map("updated_by") @db.Uuid
  createdAt                  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                  DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@index([orgId, taxEntityId, period], map: "idx_cfc_inclusions_org_period")
  @@map("cfc_inclusions")
}

model FiscalUnityComputation {
  id                   String   @id @db.Uuid
  orgId                String   @map("org_id") @db.Uuid
  parentTaxEntityId    String   @map("parent_tax_entity_id") @db.Uuid
  period               String
  members              Json
  totalChargeableIncome Decimal  @map("total_chargeable_income") @db.Decimal(18, 2)
  totalAdjustments     Decimal  @map("total_adjustments") @db.Decimal(18, 2)
  taxRate              Decimal  @map("tax_rate") @db.Decimal(10, 6)
  consolidatedCit      Decimal  @map("consolidated_cit") @db.Decimal(18, 2)
  totalTaxCredits      Decimal  @map("total_tax_credits") @db.Decimal(18, 2)
  netTaxPayable        Decimal  @map("net_tax_payable") @db.Decimal(18, 2)
  closingTaxAccount    Decimal  @map("closing_tax_account") @db.Decimal(18, 2)
  adjustmentAmount     Decimal  @map("adjustment_amount") @db.Decimal(18, 2)
  notes                String?
  createdBy            String?  @map("created_by") @db.Uuid
  updatedBy            String?  @map("updated_by") @db.Uuid
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@index([orgId, parentTaxEntityId, period], map: "idx_fiscal_unity_org_period")
  @@map("fiscal_unity_computations")
}

model VatFiling {
  id                          String   @id @db.Uuid
  orgId                       String   @map("org_id") @db.Uuid
  taxEntityId                 String   @map("tax_entity_id") @db.Uuid
  period                      String
  taxableOutputs              Decimal  @map("taxable_outputs") @db.Decimal(18, 2)
  outputVat                   Decimal  @map("output_vat") @db.Decimal(18, 2)
  inputVat                    Decimal  @map("input_vat") @db.Decimal(18, 2)
  netVatDue                   Decimal  @map("net_vat_due") @db.Decimal(18, 2)
  manualAdjustments           Decimal  @map("manual_adjustments") @db.Decimal(18, 2)
  netPayableAfterAdjustments  Decimal  @map("net_payable_after_adjustments") @db.Decimal(18, 2)
  adjustmentAmount            Decimal  @map("adjustment_amount") @db.Decimal(18, 2)
  payload                     Json
  filingType                  String   @map("filing_type")
  notes                       String?
  createdBy                   String?  @map("created_by") @db.Uuid
  updatedBy                   String?  @map("updated_by") @db.Uuid
  createdAt                   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                   DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@index([orgId, taxEntityId, period], map: "idx_vat_filings_org_period")
  @@map("vat_filings")
}

model Dac6Arrangement {
  id                   String                @id @db.Uuid
  orgId                String                @map("org_id") @db.Uuid
  taxEntityId          String                @map("tax_entity_id") @db.Uuid
  reference            String
  description          String?
  firstStepDate        DateTime?             @map("first_step_date") @db.Date
  disclosureDueDate    DateTime?             @map("disclosure_due_date") @db.Date
  status               Dac6SubmissionStatus  @default(DRAFT)
  createdBy            String?               @map("created_by") @db.Uuid
  updatedBy            String?               @map("updated_by") @db.Uuid
  createdAt            DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime              @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@index([orgId, status, createdAt], map: "idx_dac6_arrangements_org_status")
  @@map("dac6_arrangements")
}

model Dac6Hallmark {
  id              String               @id @db.Uuid
  arrangementId   String               @map("arrangement_id") @db.Uuid
  category        Dac6HallmarkCategory
  code            String
  description     String?
  mainBenefitTest Boolean              @map("main_benefit_test") @default(false)
  metadata        Json                 @default("{}")
  createdAt       DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([arrangementId], map: "idx_dac6_hallmarks_arrangement")
  @@map("dac6_hallmarks")
}

model Dac6Participant {
  id            String   @id @db.Uuid
  arrangementId String   @map("arrangement_id") @db.Uuid
  name          String
  role          String
  jurisdiction  String?
  tin           String?
  metadata      Json     @default("{}")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([arrangementId], map: "idx_dac6_participants_arrangement")
  @@map("dac6_participants")
}

model Dac6Filing {
  id                   String   @id @db.Uuid
  arrangementId        String   @map("arrangement_id") @db.Uuid
  submissionReference  String?  @map("submission_reference")
  submittedAt          DateTime? @map("submitted_at") @db.Timestamptz(6)
  payload              Json     @default("{}")
  notes                String?
  createdBy            String?  @map("created_by") @db.Uuid
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([arrangementId], map: "idx_dac6_filings_arrangement")
  @@map("dac6_filings")
}

model TaxEntityRelationship {
  id                   String   @id @db.Uuid
  orgId                String   @map("org_id") @db.Uuid
  parentTaxEntityId    String   @map("parent_tax_entity_id") @db.Uuid
  childTaxEntityId     String   @map("child_tax_entity_id") @db.Uuid
  ownershipPercentage  Decimal  @map("ownership_percentage") @db.Decimal(5, 4)
  effectiveDate        DateTime? @map("effective_date") @db.Date
  notes                String?
  createdBy            String?  @map("created_by") @db.Uuid
  updatedBy            String?  @map("updated_by") @db.Uuid
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@unique([orgId, parentTaxEntityId, childTaxEntityId], map: "tax_entity_relationships_unique")
  @@index([orgId, parentTaxEntityId], map: "idx_tax_entity_relationships_org_parent")
  @@index([childTaxEntityId], map: "idx_tax_entity_relationships_child")
  @@map("tax_entity_relationships")
}

model PillarTwoComputation {
  id                 String   @id @db.Uuid
  orgId              String   @map("org_id") @db.Uuid
  rootTaxEntityId    String   @map("root_tax_entity_id") @db.Uuid
  period             String
  girReference       String?  @map("gir_reference")
  jurisdictionResults Json    @map("jurisdiction_results") @default("[]")
  inputPayload       Json     @map("input_payload") @default("{}")
  girPayload         Json     @map("gir_payload") @default("{}")
  totalTopUpTax      Decimal  @map("total_top_up_tax") @db.Decimal(18, 2)
  qdmtTopUpTax       Decimal  @map("qdmt_top_up_tax") @db.Decimal(18, 2)
  iirTopUpTax        Decimal  @map("iir_top_up_tax") @db.Decimal(18, 2)
  notes              String?
  metadata           Json     @default("{}")
  createdBy          String?  @map("created_by") @db.Uuid
  updatedBy          String?  @map("updated_by") @db.Uuid
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@index([orgId, period], map: "idx_pillar_two_computations_org_period")
  @@index([rootTaxEntityId], map: "idx_pillar_two_computations_root")
  @@map("pillar_two_computations")
}

model TreatyWhtCalculation {
  id                   String   @id @db.Uuid
  orgId                String   @map("org_id") @db.Uuid
  taxEntityId          String   @map("tax_entity_id") @db.Uuid
  counterpartyJurisdiction String @map("counterparty_jurisdiction")
  paymentType          String   @map("payment_type")
  treatyArticle        String?  @map("treaty_article")
  domesticRate         Decimal  @map("domestic_rate") @db.Decimal(6, 4)
  treatyRate           Decimal  @map("treaty_rate") @db.Decimal(6, 4)
  grossAmount          Decimal  @map("gross_amount") @db.Decimal(18, 2)
  withholdingBefore    Decimal  @map("withholding_before") @db.Decimal(18, 2)
  withholdingAfter     Decimal  @map("withholding_after") @db.Decimal(18, 2)
  reliefAmount         Decimal  @map("relief_amount") @db.Decimal(18, 2)
  reliefMethod         String   @map("relief_method")
  notes                String?
  metadata             Json     @default("{}")
  createdBy            String?  @map("created_by") @db.Uuid
  updatedBy            String?  @map("updated_by") @db.Uuid
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@index([orgId, taxEntityId, createdAt], map: "idx_treaty_wht_org_period")
  @@map("treaty_wht_calculations")
}

model TaxDisputeCase {
  id                        String           @id @db.Uuid
  orgId                     String           @map("org_id") @db.Uuid
  taxEntityId               String           @map("tax_entity_id") @db.Uuid
  caseType                  String           @map("case_type")
  counterpartyJurisdiction  String           @map("counterparty_jurisdiction")
  counterpartyAuthority     String?          @map("counterparty_authority")
  caseReference             String?          @map("case_reference")
  status                    TaxDisputeStatus @default(OPEN)
  openedOn                  DateTime         @default(now()) @map("opened_on") @db.Date
  expectedResolution        DateTime?        @map("expected_resolution") @db.Date
  reliefAmount              Decimal?         @map("relief_amount") @db.Decimal(18, 2)
  issueSummary              String?          @map("issue_summary")
  notes                     String?
  metadata                  Json             @default("{}")
  createdBy                 String?          @map("created_by") @db.Uuid
  updatedBy                 String?          @map("updated_by") @db.Uuid
  createdAt                 DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                 DateTime         @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@index([orgId, status, createdAt], map: "idx_tax_dispute_cases_org_status")
  @@map("tax_dispute_cases")
}

model TaxDisputeEvent {
  id          String   @id @db.Uuid
  orgId       String   @map("org_id") @db.Uuid
  disputeId   String   @map("dispute_id") @db.Uuid
  eventType   String   @map("event_type")
  eventDate   DateTime @map("event_date") @db.Date
  description String?
  metadata    Json     @default("{}")
  createdBy   String?  @map("created_by") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([disputeId, eventDate], map: "idx_tax_dispute_events_dispute_date")
  @@map("tax_dispute_events")
}

model UsTaxOverlayCalculation {
  id               String        @id @db.Uuid
  orgId            String        @map("org_id") @db.Uuid
  taxEntityId      String        @map("tax_entity_id") @db.Uuid
  period           String
  overlayType      UsOverlayType @map("overlay_type")
  inputs           Json          @default("{}")
  results          Json          @default("{}")
  adjustmentAmount Decimal       @map("adjustment_amount") @db.Decimal(18, 2)
  notes            String?
  metadata         Json          @default("{}")
  createdBy        String?       @map("created_by") @db.Uuid
  updatedBy        String?       @map("updated_by") @db.Uuid
  createdAt        DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime      @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@index([orgId, overlayType, period], map: "idx_us_tax_overlay_org_type")
  @@map("us_tax_overlay_calculations")
}
