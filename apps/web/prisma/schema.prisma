// Prisma schema aligning with the Supabase Postgres schema
// The datasource uses DATABASE_URL / DIRECT_URL environment variables configured in CI and the hosting platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

enum RoleLevel {
  EMPLOYEE
  MANAGER
  SYSTEM_ADMIN

  @@map("role_level")
}

model User {
  id            String   @id @db.Uuid
  email         String   @unique
  name          String?
  avatarUrl     String?  @map("avatar_url")
  isSystemAdmin Boolean  @default(false) @map("is_system_admin")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  memberships   Membership[]
  documents     Document[]     @relation("UploadedByUser")
  notifications Notification[]
  activityLogs  ActivityLog[]
  agentSessions AgentSession[]
  accounting    Accounting[]   @relation("AccountingCreatedBy")
  Audit         Audit[]
  analyticsEvents AnalyticsEvent[] @relation("AnalyticsActor")

  @@map("users")
}

model Organization {
  id             String   @id @db.Uuid
  name           String
  slug           String   @unique
  brandPrimary   String?  @default("#6366f1") @map("brand_primary")
  brandSecondary String?  @default("#8b5cf6") @map("brand_secondary")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  memberships   Membership[]
  clients       Client[]
  engagements   Engagement[]
  tasks         Task[]
  documents     Document[]
  notifications Notification[]
  activityLogs  ActivityLog[]
  agentSessions AgentSession[]
  audits        Audit[]
  accounting    Accounting[]   @relation("AccountingOrganization")
  taxRules      Tax[]
  analyticsEvents AnalyticsEvent[]

  @@map("organizations")
}

model Membership {
  id        String    @id @db.Uuid
  orgId     String    @map("org_id") @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  role      RoleLevel @default(EMPLOYEE)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)

  organization Organization @relation(fields: [orgId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@unique([orgId, userId])
  @@map("memberships")
}

model Client {
  id            String   @id @db.Uuid
  orgId         String   @map("org_id") @db.Uuid
  name          String
  contactName   String?  @map("contact_name")
  email         String?
  phone         String?
  country       String?
  industry      String?
  fiscalYearEnd String?  @map("fiscal_year_end")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  organization Organization @relation(fields: [orgId], references: [id])
  engagements  Engagement[]

  @@map("clients")
}

model Engagement {
  id          String    @id @db.Uuid
  orgId       String    @map("org_id") @db.Uuid
  clientId    String    @map("client_id") @db.Uuid
  title       String
  description String?
  status      String?   @default("active")
  startDate   DateTime? @map("start_date") @db.Date
  endDate     DateTime? @map("end_date") @db.Date
  budget      Decimal?  @db.Decimal(10, 2)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)

  organization Organization @relation(fields: [orgId], references: [id])
  client       Client       @relation(fields: [clientId], references: [id])
  tasks        Task[]
  documents    Document[]

  @@map("engagements")
}

model Task {
  id           String    @id @db.Uuid
  orgId        String    @map("org_id") @db.Uuid
  engagementId String?   @map("engagement_id") @db.Uuid
  title        String
  description  String?
  status       String?   @default("pending")
  priority     String?   @default("medium")
  assignedTo   String?   @map("assigned_to") @db.Uuid
  dueDate      DateTime? @map("due_date") @db.Date
  completedAt  DateTime? @map("completed_at") @db.Timestamptz(6)
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)

  organization Organization @relation(fields: [orgId], references: [id])
  engagement   Engagement?  @relation(fields: [engagementId], references: [id])
  documents    Document[]

  @@map("tasks")
}

model Document {
  id           String   @id @db.Uuid
  orgId        String   @map("org_id") @db.Uuid
  engagementId String?  @map("engagement_id") @db.Uuid
  taskId       String?  @map("task_id") @db.Uuid
  name         String
  filePath     String?  @map("file_path")
  fileSize     Int?     @map("file_size")
  fileType     String?  @map("file_type")
  uploadedById String   @map("uploaded_by") @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  organization Organization @relation(fields: [orgId], references: [id])
  engagement   Engagement?  @relation(fields: [engagementId], references: [id])
  task         Task?        @relation(fields: [taskId], references: [id])
  uploadedBy   User         @relation("UploadedByUser", fields: [uploadedById], references: [id])

  @@map("documents")
}

model Notification {
  id        String   @id @db.Uuid
  orgId     String   @map("org_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  title     String
  message   String?
  type      String?  @default("info")
  read      Boolean? @default(false)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  organization Organization @relation(fields: [orgId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model ActivityLog {
  id         String   @id @db.Uuid
  orgId      String   @map("org_id") @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  action     String
  entityType String?  @map("entity_type")
  entityId   String?  @map("entity_id") @db.Uuid
  metadata   Json?
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  organization Organization @relation(fields: [orgId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@map("activity_log")
}

model AgentSession {
  id        String                 @id @db.Uuid
  orgId     String                 @map("org_id") @db.Uuid
  userId    String?                @map("user_id") @db.Uuid
  input     String?
  output    String?
  embedding Unsupported("vector")?
  metadata  Json?
  createdAt DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime               @default(now()) @map("updated_at") @db.Timestamptz(6)

  organization Organization @relation(fields: [orgId], references: [id])
  user         User?        @relation(fields: [userId], references: [id])

  @@map("agent_sessions")
}

model Audit {
  id        String   @id @db.Uuid
  orgId     String   @map("org_id") @db.Uuid
  actorId   String?  @map("actor_id") @db.Uuid
  action    String
  tableName String?  @map("table_name")
  recordId  String?  @map("record_id") @db.Uuid
  oldData   Json?    @map("old_data")
  newData   Json?    @map("new_data")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  organization Organization @relation(fields: [orgId], references: [id])
  actor        User?        @relation(fields: [actorId], references: [id])

  @@map("audit")
}

model Accounting {
  id          String   @id @db.Uuid
  orgId       String   @map("org_id") @db.Uuid
  entryType   String   @map("entry_type")
  amount      Decimal  @db.Decimal(12, 2)
  description String?
  createdById String?  @map("created_by") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  organization Organization @relation("AccountingOrganization", fields: [orgId], references: [id])
  createdBy    User?        @relation("AccountingCreatedBy", fields: [createdById], references: [id])

  @@map("accounting")
}

model Tax {
  id            String   @id @db.Uuid
  orgId         String?  @map("org_id") @db.Uuid
  jurisdiction  String
  rule          String
  rate          Decimal  @db.Decimal(5, 2)
  reverseCharge Boolean? @default(false) @map("reverse_charge")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  organization Organization? @relation(fields: [orgId], references: [id])

  @@map("tax")
}

model TelemetryServiceLevel {
  id           String   @id @db.Uuid
  orgId        String?  @map("org_id") @db.Uuid
  module       String
  workflowEvent String  @map("workflow_event")
  targetHours  Int      @map("target_hours")
  breaches     Int      @default(0)
  lastBreachAt DateTime? @map("last_breach_at") @db.Timestamptz(6)
  openBreaches Int      @default(0) @map("open_breaches")
  status       String   @default("ON_TRACK")
  computedAt   DateTime @default(now()) @map("computed_at") @db.Timestamptz(6)

  organization Organization? @relation(fields: [orgId], references: [id])

  @@index([orgId, module], map: "idx_telemetry_sla_org_module")
  @@map("telemetry_service_levels")
}

model TelemetryCoverageMetric {
  id            String   @id @db.Uuid
  orgId         String?  @map("org_id") @db.Uuid
  module        String
  metric        String
  measuredValue Decimal  @map("measured_value") @db.Decimal(18, 2)
  population    Decimal  @db.Decimal(18, 2)
  coverageRatio Decimal  @map("coverage_ratio") @db.Decimal(6, 3)
  periodStart   DateTime @map("period_start") @db.Date
  periodEnd     DateTime @map("period_end") @db.Date
  computedAt    DateTime @default(now()) @map("computed_at") @db.Timestamptz(6)

  organization Organization? @relation(fields: [orgId], references: [id])

  @@index([orgId, module], map: "idx_telemetry_coverage_org_module")
  @@map("telemetry_coverage_metrics")
}

model TelemetryRefusalEvent {
  id        String   @id @db.Uuid
  orgId     String?  @map("org_id") @db.Uuid
  module    String
  event     String
  reason    String?
  severity  String?  @default("INFO")
  count     Int      @default(1)
  occurredAt DateTime @default(now()) @map("occurred_at") @db.Timestamptz(6)

  organization Organization? @relation(fields: [orgId], references: [id])

  @@index([orgId, module], map: "idx_telemetry_refusal_org_module")
  @@map("telemetry_refusal_events")
}

model OpenAiDebugEvent {
  id         String   @id @db.Uuid
  requestId  String   @map("request_id")
  modelName  String?  @map("model")
  endpoint   String
  statusCode Int?     @map("status_code")
  orgId      String?  @map("org_id") @db.Uuid
  metadata   Json     @default("{}")
  debug      Json?
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  organization Organization? @relation(fields: [orgId], references: [id])

  @@unique([requestId], map: "uq_openai_debug_request_id")
  @@map("openai_debug_events")
}

model AnalyticsEvent {
  id         String    @id @db.Uuid
  event      String
  service    String?
  source     String
  orgId      String?   @map("org_id") @db.Uuid
  actorId    String?   @map("actor_id") @db.Uuid
  properties Json      @default("{}")
  tags       String[]  @db.TextArray
  context    Json      @default("{}")
  metadata   Json      @default("{}")
  occurredAt DateTime  @default(now()) @map("occurred_at") @db.Timestamptz(6)
  ingestedAt DateTime  @default(now()) @map("ingested_at") @db.Timestamptz(6)

  organization Organization? @relation(fields: [orgId], references: [id])
  actor        User?         @relation("AnalyticsActor", fields: [actorId], references: [id])

  @@index([orgId, event], map: "idx_analytics_events_org_event")
  @@index([occurredAt], map: "idx_analytics_events_occurred_at")
  @@map("analytics_events")
}
