diff --git a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/basket.ts b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/basket.ts
index 3b22dcc..dd3b926 100644
--- a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/basket.ts
+++ b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/basket.ts
@@ -5,6 +5,8 @@ import { sb } from "../config.ts";
 import { safeButtonTitle, safeRowDesc, safeRowTitle } from "../utils/text.ts";
 import { e164, to07FromE164 } from "../utils/phone.ts";
 import { buildShareLink, buildShareQR } from "../utils/share.ts";
+import { ctxFromConversation, logError } from "../utils/logger.ts";
+import type { LogContext } from "../utils/logger.ts";
 
 interface BasketRow {
   id: string;
@@ -47,25 +49,59 @@ interface CreateBasketState {
 const PAGE_SIZE = 5;
 
 function slugifyName(name: string): string {
-  return name.toLowerCase().trim().replace(/[^a-z0-9]+/g, "-").replace(/(^-|-$)/g, "");
+  return name.toLowerCase().trim().replace(/[^a-z0-9]+/g, "-").replace(
+    /(^-|-$)/g,
+    "",
+  );
 }
 
-async function fetchBasket(id: string): Promise<BasketRow | null> {
+function replyText(ctx: ConversationContext, body: string) {
+  return sendText(ctx.phone, body, ctxFromConversation(ctx));
+}
+
+function replyButtons(
+  ctx: ConversationContext,
+  body: string,
+  buttons: Parameters<typeof sendButtons>[2],
+) {
+  return sendButtons(ctx.phone, body, buttons, ctxFromConversation(ctx));
+}
+
+function replyList(
+  ctx: ConversationContext,
+  options: Parameters<typeof sendList>[1],
+) {
+  return sendList(ctx.phone, options, ctxFromConversation(ctx));
+}
+
+function replyImage(ctx: ConversationContext, link: string, caption?: string) {
+  return sendImageUrl(ctx.phone, link, caption, ctxFromConversation(ctx));
+}
+
+async function fetchBasket(
+  id: string,
+  logCtx: LogContext,
+): Promise<BasketRow | null> {
   try {
     const { data, error } = await sb
       .from("baskets")
-      .select("id,name,description,type,status,public_slug,creator_id,momo_target,momo_is_code,created_at")
+      .select(
+        "id,name,description,type,status,public_slug,creator_id,momo_target,momo_is_code,created_at",
+      )
       .eq("id", id)
       .maybeSingle();
     if (error) throw error;
     return data as BasketRow ?? null;
   } catch (err) {
-    console.error("fetchBasket failed", err);
+    logError("BASKET_FETCH_FAILED", err, { basketId: id }, logCtx);
     return null;
   }
 }
 
-async function fetchBasketByToken(token: string): Promise<BasketRow | null> {
+async function fetchBasketByToken(
+  token: string,
+  logCtx: LogContext,
+): Promise<BasketRow | null> {
   try {
     const { data, error } = await sb
       .from("baskets")
@@ -75,17 +111,22 @@ async function fetchBasketByToken(token: string): Promise<BasketRow | null> {
     if (error) throw error;
     return data as BasketRow ?? null;
   } catch (err) {
-    console.error("fetchBasketByToken failed", err);
+    logError("BASKET_FETCH_BY_TOKEN_FAILED", err, { token }, logCtx);
     return null;
   }
 }
 
-async function loadUserBaskets(userId: string): Promise<BasketRow[]> {
+async function loadUserBaskets(
+  userId: string,
+  logCtx: LogContext,
+): Promise<BasketRow[]> {
   const baskets: Record<string, BasketRow> = {};
   try {
     const owned = await sb
       .from("baskets")
-      .select("id,name,description,type,status,public_slug,creator_id,momo_target,momo_is_code,created_at")
+      .select(
+        "id,name,description,type,status,public_slug,creator_id,momo_target,momo_is_code,created_at",
+      )
       .eq("creator_id", userId);
     if (!owned.error) {
       for (const row of owned.data as BasketRow[]) {
@@ -93,16 +134,21 @@ async function loadUserBaskets(userId: string): Promise<BasketRow[]> {
       }
     }
   } catch (err) {
-    console.error("loadUserBaskets owned failed", err);
+    logError("BASKET_LIST_OWNED_FAILED", err, { userId }, logCtx);
   }
 
   try {
     const member = await sb
       .from("basket_members")
-      .select("basket_id,baskets(id,name,description,type,status,public_slug,creator_id,momo_target,momo_is_code,created_at)")
+      .select(
+        "basket_id,baskets(id,name,description,type,status,public_slug,creator_id,momo_target,momo_is_code,created_at)",
+      )
       .eq("user_id", userId);
     if (!member.error) {
-      const memberRows = (member.data ?? []) as unknown as { basket_id: string; baskets: BasketRow | null }[];
+      const memberRows = (member.data ?? []) as unknown as {
+        basket_id: string;
+        baskets: BasketRow | null;
+      }[];
       for (const row of memberRows) {
         if (row.baskets) {
           baskets[row.basket_id] = row.baskets;
@@ -110,13 +156,17 @@ async function loadUserBaskets(userId: string): Promise<BasketRow[]> {
       }
     }
   } catch (err) {
-    console.error("loadUserBaskets member failed", err);
+    logError("BASKET_LIST_MEMBER_FAILED", err, { userId }, logCtx);
   }
 
   return Object.values(baskets);
 }
 
-async function ensureMember(basketId: string, userId: string) {
+async function ensureMember(
+  basketId: string,
+  userId: string,
+  logCtx: LogContext,
+) {
   try {
     await sb
       .from("basket_members")
@@ -126,11 +176,15 @@ async function ensureMember(basketId: string, userId: string) {
         joined_at: new Date().toISOString(),
       }, { onConflict: "basket_id,user_id" });
   } catch (err) {
-    console.error("ensureMember failed", err);
+    logError("BASKET_MEMBER_ENSURE_FAILED", err, { basketId, userId }, logCtx);
   }
 }
 
-async function removeMember(basketId: string, userId: string) {
+async function removeMember(
+  basketId: string,
+  userId: string,
+  logCtx: LogContext,
+) {
   try {
     await sb
       .from("basket_members")
@@ -138,11 +192,16 @@ async function removeMember(basketId: string, userId: string) {
       .eq("basket_id", basketId)
       .eq("user_id", userId);
   } catch (err) {
-    console.error("removeMember failed", err);
+    logError("BASKET_MEMBER_REMOVE_FAILED", err, { basketId, userId }, logCtx);
   }
 }
 
-async function insertContribution(basketId: string, userId: string, amount: number): Promise<string | null> {
+async function insertContribution(
+  basketId: string,
+  userId: string,
+  amount: number,
+  logCtx: LogContext,
+): Promise<string | null> {
   try {
     const { data, error } = await sb
       .from("basket_contributions")
@@ -158,12 +217,17 @@ async function insertContribution(basketId: string, userId: string, amount: numb
     if (error) throw error;
     return data?.id as string;
   } catch (err) {
-    console.error("insertContribution failed", err);
+    logError("BASKET_CONTRIB_INSERT_FAILED", err, { basketId, userId }, logCtx);
     return null;
   }
 }
 
-async function updateContributionStatus(id: string, status: "approved" | "rejected", approver: string) {
+async function updateContributionStatus(
+  id: string,
+  status: "approved" | "rejected",
+  approver: string,
+  logCtx: LogContext,
+) {
   try {
     const payload = {
       status,
@@ -176,11 +240,19 @@ async function updateContributionStatus(id: string, status: "approved" | "reject
       .update(payload)
       .eq("id", id);
   } catch (err) {
-    console.error("updateContributionStatus failed", err);
+    logError("BASKET_CONTRIB_STATUS_FAILED", err, {
+      contributionId: id,
+      status,
+    }, logCtx);
   }
 }
 
-async function incrementMemberTotal(basketId: string, userId: string, amount: number) {
+async function incrementMemberTotal(
+  basketId: string,
+  userId: string,
+  amount: number,
+  logCtx: LogContext,
+) {
   try {
     const { data, error } = await sb
       .from("basket_members")
@@ -199,11 +271,14 @@ async function incrementMemberTotal(basketId: string, userId: string, amount: nu
         joined_at: new Date().toISOString(),
       }, { onConflict: "basket_id,user_id" });
   } catch (err) {
-    console.error("incrementMemberTotal failed", err);
+    logError("BASKET_MEMBER_TOTAL_FAILED", err, { basketId, userId }, logCtx);
   }
 }
 
-async function fetchContribution(id: string): Promise<ContributionRow | null> {
+async function fetchContribution(
+  id: string,
+  logCtx: LogContext,
+): Promise<ContributionRow | null> {
   try {
     const { data, error } = await sb
       .from("basket_contributions")
@@ -213,12 +288,22 @@ async function fetchContribution(id: string): Promise<ContributionRow | null> {
     if (error) throw error;
     return data as ContributionRow ?? null;
   } catch (err) {
-    console.error("fetchContribution failed", err);
+    logError(
+      "BASKET_CONTRIB_FETCH_FAILED",
+      err,
+      { contributionId: id },
+      logCtx,
+    );
     return null;
   }
 }
 
-async function notifyContributor(contrib: ContributionRow, message: string) {
+async function notifyContributor(
+  ctx: ConversationContext,
+  contrib: ContributionRow,
+  message: string,
+) {
+  const logCtx = ctxFromConversation(ctx);
   try {
     const { data, error } = await sb
       .from("profiles")
@@ -228,14 +313,23 @@ async function notifyContributor(contrib: ContributionRow, message: string) {
     if (error) throw error;
     const wa = data?.whatsapp_e164;
     if (wa) {
-      await sendText(wa, message);
+      await sendText(wa, message, logCtx);
     }
   } catch (err) {
-    console.error("notifyContributor failed", err);
+    logError("BASKET_NOTIFY_CONTRIBUTOR_FAILED", err, {
+      contributionId: contrib.id,
+    }, logCtx);
   }
 }
 
-async function notifyCreatorOfContribution(basket: BasketRow, contributionId: string, amount: number, contributor: string) {
+async function notifyCreatorOfContribution(
+  ctx: ConversationContext,
+  basket: BasketRow,
+  contributionId: string,
+  amount: number,
+  contributor: string,
+) {
+  const logCtx = ctxFromConversation(ctx);
   try {
     const digits = e164(contributor || "");
     const contributorDisplay = to07FromE164(digits);
@@ -247,13 +341,21 @@ async function notifyCreatorOfContribution(basket: BasketRow, contributionId: st
     if (error) throw error;
     const wa = data?.whatsapp_e164;
     if (wa) {
-      await sendButtons(wa, `Contribution request: RWF ${amount.toLocaleString()} from ${contributorDisplay} for ${basket.name}`, [
-        { id: `bk_appr_${contributionId}`, title: safeButtonTitle("Approve") },
-        { id: `bk_rej_${contributionId}`, title: safeButtonTitle("Reject") },
-      ]);
+      await sendButtons(
+        wa,
+        `Contribution request: RWF ${amount.toLocaleString()} from ${contributorDisplay} for ${basket.name}`,
+        [
+          {
+            id: `bk_appr_${contributionId}`,
+            title: safeButtonTitle("Approve"),
+          },
+          { id: `bk_rej_${contributionId}`, title: safeButtonTitle("Reject") },
+        ],
+        logCtx,
+      );
     }
   } catch (err) {
-    console.error("notifyCreatorOfContribution failed", err);
+    logError("BASKET_NOTIFY_CREATOR_FAILED", err, { contributionId }, logCtx);
   }
 }
 
@@ -263,19 +365,27 @@ function buildSharePayload(basket: BasketRow) {
   return { token, prefill };
 }
 
-async function sendShareLinks(to: string, basket: BasketRow) {
+async function sendShareLinks(ctx: ConversationContext, basket: BasketRow) {
   const { token, prefill } = buildSharePayload(basket);
   const link = await buildShareLink(undefined, prefill);
   const qr = await buildShareQR(link);
-  await sendText(to, `Share this basket link:\n${link}\nUse code: JOIN_BASKET:${token}`);
-  await sendImageUrl(to, qr, `${basket.name} basket QR`);
+  await replyText(
+    ctx,
+    `Share this basket link:\n${link}\nUse code: JOIN_BASKET:${token}`,
+  );
+  await replyImage(ctx, qr, `${basket.name} basket QR`);
 }
 
 function parseContributionId(id: string): string {
   return id.replace(/^bk_(?:appr|rej)_/, "");
 }
 
-async function listMembers(ctx: ConversationContext, basket: BasketRow, page: number) {
+async function listMembers(
+  ctx: ConversationContext,
+  basket: BasketRow,
+  page: number,
+) {
+  const logCtx = ctxFromConversation(ctx);
   try {
     const { data, error } = await sb
       .from("basket_members")
@@ -286,21 +396,31 @@ async function listMembers(ctx: ConversationContext, basket: BasketRow, page: nu
     if (error) throw error;
     const members = data as BasketMemberRow[];
     if (!members.length) {
-      await sendText(ctx.phone, "No more members to show.");
+      await replyText(ctx, "No more members to show.");
       return;
     }
     const lines = members.map((m, idx) => {
-      const wa = m.profiles?.whatsapp_e164 ? to07FromE164(m.profiles.whatsapp_e164) : m.user_id.slice(0, 8);
+      const wa = m.profiles?.whatsapp_e164
+        ? to07FromE164(m.profiles.whatsapp_e164)
+        : m.user_id.slice(0, 8);
       const contributed = Number(m.total_contributed ?? 0).toLocaleString();
       return `${page * PAGE_SIZE + idx + 1}. ${wa} • RWF ${contributed}`;
     });
-    await sendButtons(ctx.phone, `Members for ${basket.name}\n${lines.join("\n")}`, [
-      { id: `bk_mems_${basket.id}_${page + 1}`, title: safeButtonTitle("More") },
+    await replyButtons(ctx, `Members for ${basket.name}\n${lines.join("\n")}`, [
+      {
+        id: `bk_mems_${basket.id}_${page + 1}`,
+        title: safeButtonTitle("More"),
+      },
       { id: "back_home", title: safeButtonTitle("Back") },
     ]);
   } catch (err) {
-    console.error("listMembers failed", err);
-    await sendText(ctx.phone, "Could not load members right now.");
+    logError(
+      "BASKET_MEMBERS_LIST_FAILED",
+      err,
+      { basketId: basket.id, page },
+      logCtx,
+    );
+    await replyText(ctx, "Could not load members right now.");
   }
 }
 
@@ -311,34 +431,57 @@ async function showBasketActions(ctx: ConversationContext, basket: BasketRow) {
     { id: `bk_share_${basket.id}`, title: safeButtonTitle("Share") },
   ];
   buttons.push({ id: `bk_qr_${basket.id}`, title: safeButtonTitle("QR") });
-  buttons.push({ id: `bk_mems_${basket.id}_0`, title: safeButtonTitle("Members") });
+  buttons.push({
+    id: `bk_mems_${basket.id}_0`,
+    title: safeButtonTitle("Members"),
+  });
   if (basket.status !== "closed") {
-    buttons.push({ id: `bk_leave_${basket.id}`, title: safeButtonTitle("Leave") });
+    buttons.push({
+      id: `bk_leave_${basket.id}`,
+      title: safeButtonTitle("Leave"),
+    });
   }
   if (ctx.userId === basket.creator_id) {
     if (basket.status !== "closed") {
-      buttons.push({ id: `bk_close_${basket.id}`, title: safeButtonTitle("Close") });
+      buttons.push({
+        id: `bk_close_${basket.id}`,
+        title: safeButtonTitle("Close"),
+      });
     }
   } else {
-    buttons.push({ id: `bk_join_${basket.id}`, title: safeButtonTitle("Join") });
+    buttons.push({
+      id: `bk_join_${basket.id}`,
+      title: safeButtonTitle("Join"),
+    });
   }
-  await sendButtons(ctx.phone, `Basket: ${basket.name}`, buttons.slice(0, 3));
+  await replyButtons(ctx, `Basket: ${basket.name}`, buttons.slice(0, 3));
   if (buttons.length > 3) {
-    await sendButtons(ctx.phone, "More actions", buttons.slice(3, 6));
+    await replyButtons(ctx, "More actions", buttons.slice(3, 6));
   }
 }
 
 export async function startBaskets(ctx: ConversationContext) {
-  const baskets = await loadUserBaskets(ctx.userId);
+  const logCtx = ctxFromConversation(ctx);
+  const baskets = await loadUserBaskets(ctx.userId, logCtx);
   const rows = baskets.slice(0, 10).map((basket) => ({
     id: `b_${basket.id}`,
     title: safeRowTitle(basket.name || "(untitled)"),
-    description: safeRowDesc(`${basket.type ?? ""} • ${basket.status ?? ""}`.trim()),
+    description: safeRowDesc(
+      `${basket.type ?? ""} • ${basket.status ?? ""}`.trim(),
+    ),
   }));
-  rows.push({ id: "bk_new", title: "Create basket", description: "Start a new basket" });
-  rows.push({ id: "bk_join_code", title: "Join via code", description: "Send JOIN_BASKET:<code>" });
+  rows.push({
+    id: "bk_new",
+    title: "Create basket",
+    description: "Start a new basket",
+  });
+  rows.push({
+    id: "bk_join_code",
+    title: "Join via code",
+    description: "Send JOIN_BASKET:<code>",
+  });
 
-  await sendList(ctx.phone, {
+  await replyList(ctx, {
     title: "Baskets",
     body: "Manage or create baskets.",
     buttonText: "Open",
@@ -349,22 +492,26 @@ export async function startBaskets(ctx: ConversationContext) {
   ctx.state = { key: "basket_ctx", data: {} };
 }
 
-export async function handleBasketListSelection(ctx: ConversationContext, id: string) {
+export async function handleBasketListSelection(
+  ctx: ConversationContext,
+  id: string,
+) {
+  const logCtx = ctxFromConversation(ctx);
   if (id === "bk_new") {
-    await sendText(ctx.phone, "What is the basket name?");
+    await replyText(ctx, "What is the basket name?");
     await setState(ctx.userId, "await_basket_name", {});
     ctx.state = { key: "await_basket_name", data: {} };
     return;
   }
   if (id === "bk_join_code") {
-    await sendText(ctx.phone, "Send the JOIN_BASKET:<code> you received.");
+    await replyText(ctx, "Send the JOIN_BASKET:<code> you received.");
     return;
   }
   if (id.startsWith("b_")) {
     const basketId = id.replace("b_", "");
-    const basket = await fetchBasket(basketId);
+    const basket = await fetchBasket(basketId, logCtx);
     if (!basket) {
-      await sendText(ctx.phone, "Basket not found.");
+      await replyText(ctx, "Basket not found.");
       return;
     }
     await showBasketActions(ctx, basket);
@@ -372,7 +519,10 @@ export async function handleBasketListSelection(ctx: ConversationContext, id: st
   }
 }
 
-export async function handleBasketText(ctx: ConversationContext, text: string): Promise<boolean> {
+export async function handleBasketText(
+  ctx: ConversationContext,
+  text: string,
+): Promise<boolean> {
   const trimmed = text.trim();
   if (trimmed.toUpperCase().startsWith("JOIN_BASKET:")) {
     const token = trimmed.slice("JOIN_BASKET:".length).trim();
@@ -396,11 +546,11 @@ export async function handleBasketText(ctx: ConversationContext, text: string):
         return true;
       }
       if (trimmed.toLowerCase() === "no") {
-        await sendText(ctx.phone, "Cancelled basket creation.");
+        await replyText(ctx, "Cancelled basket creation.");
         await startBaskets(ctx);
         return true;
       }
-      await sendText(ctx.phone, "Reply YES to confirm or NO to cancel.");
+      await replyText(ctx, "Reply YES to confirm or NO to cancel.");
       return true;
     case "await_contrib_amount":
       await handleContributionAmount(ctx, trimmed);
@@ -413,11 +563,11 @@ export async function handleBasketText(ctx: ConversationContext, text: string):
 
 async function handleBasketName(ctx: ConversationContext, name: string) {
   if (!name) {
-    await sendText(ctx.phone, "Name cannot be empty.");
+    await replyText(ctx, "Name cannot be empty.");
     return;
   }
   const data: CreateBasketState = { name };
-  await sendText(ctx.phone, "Describe the basket (optional).");
+  await replyText(ctx, "Describe the basket (optional).");
   await setState(ctx.userId, "await_basket_desc", data);
   ctx.state = { key: "await_basket_desc", data };
 }
@@ -429,7 +579,7 @@ async function handleBasketDesc(ctx: ConversationContext, desc: string) {
     return;
   }
   const data = { ...current, description: desc };
-  await sendButtons(ctx.phone, "Is this basket Public or Private?", [
+  await replyButtons(ctx, "Is this basket Public or Private?", [
     { id: "bk_type_public", title: "Public" },
     { id: "bk_type_private", title: "Private" },
   ]);
@@ -445,7 +595,10 @@ export async function handleBasketType(ctx: ConversationContext, id: string) {
   }
   const type = id === "bk_type_public" ? "public" : "private";
   const data = { ...current, type };
-  await sendText(ctx.phone, "Provide MoMo number/code for contributions, or reply SKIP.");
+  await replyText(
+    ctx,
+    "Provide MoMo number/code for contributions, or reply SKIP.",
+  );
   await setState(ctx.userId, "await_basket_momo", data);
   ctx.state = { key: "await_basket_momo", data };
 }
@@ -465,18 +618,26 @@ async function handleBasketMomo(ctx: ConversationContext, text: string) {
     momo_is_code = digits.length >= 4 && digits.length <= 9;
   }
   const data: CreateBasketState = { ...current, momo_target, momo_is_code };
-  await sendText(ctx.phone, `Confirm basket creation?\nName: ${data.name}\nType: ${data.type}\nMoMo: ${data.momo_target ?? "(none)"}\nReply YES to confirm or NO to cancel.`);
+  await replyText(
+    ctx,
+    `Confirm basket creation?\nName: ${data.name}\nType: ${data.type}\nMoMo: ${
+      data.momo_target ?? "(none)"
+    }\nReply YES to confirm or NO to cancel.`,
+  );
   await setState(ctx.userId, "await_basket_confirm", data);
   ctx.state = { key: "await_basket_confirm", data };
 }
 
 async function finalizeBasket(ctx: ConversationContext) {
+  const logCtx = ctxFromConversation(ctx);
   const data = ctx.state.data as CreateBasketState | undefined;
   if (!data?.name || !data.type) {
     await startBaskets(ctx);
     return;
   }
-  const slug = data.type === "public" ? `${slugifyName(data.name)}-${crypto.randomUUID().slice(0, 6)}` : null;
+  const slug = data.type === "public"
+    ? `${slugifyName(data.name)}-${crypto.randomUUID().slice(0, 6)}`
+    : null;
   try {
     const { data: inserted, error } = await sb
       .from("baskets")
@@ -491,29 +652,38 @@ async function finalizeBasket(ctx: ConversationContext) {
         momo_is_code: data.momo_is_code ?? null,
         created_at: new Date().toISOString(),
       })
-      .select("id,name,type,status,public_slug,creator_id,momo_target,momo_is_code")
+      .select(
+        "id,name,type,status,public_slug,creator_id,momo_target,momo_is_code",
+      )
       .single();
     if (error) throw error;
     const basket = inserted as BasketRow;
-    await ensureMember(basket.id, ctx.userId);
+    await ensureMember(basket.id, ctx.userId, logCtx);
     if (basket.type === "public") {
-      await sendText(ctx.phone, "Basket created and sent for review. We'll notify you once approved.");
+      await replyText(
+        ctx,
+        "Basket created and sent for review. We'll notify you once approved.",
+      );
     } else {
-      await sendText(ctx.phone, "✅ Basket created! You can share it now.");
-      await sendShareLinks(ctx.phone, basket);
+      await replyText(ctx, "✅ Basket created! You can share it now.");
+      await sendShareLinks(ctx, basket);
     }
   } catch (err) {
-    console.error("finalizeBasket failed", err);
-    await sendText(ctx.phone, "Could not create basket. Try again later.");
+    logError("BASKET_FINALIZE_FAILED", err, { userId: ctx.userId }, logCtx);
+    await replyText(ctx, "Could not create basket. Try again later.");
   }
   await clearState(ctx.userId);
   await startBaskets(ctx);
 }
 
-async function handleContributionAmount(ctx: ConversationContext, text: string) {
+async function handleContributionAmount(
+  ctx: ConversationContext,
+  text: string,
+) {
+  const logCtx = ctxFromConversation(ctx);
   const amount = Number.parseInt(text.replace(/\D/g, ""), 10);
   if (!Number.isFinite(amount) || amount <= 0) {
-    await sendText(ctx.phone, "Enter a valid amount (numbers only).");
+    await replyText(ctx, "Enter a valid amount (numbers only).");
     return;
   }
   const current = ctx.state.data as { basket_id?: string } | undefined;
@@ -522,68 +692,85 @@ async function handleContributionAmount(ctx: ConversationContext, text: string)
     await startBaskets(ctx);
     return;
   }
-  await ensureMember(basketId, ctx.userId);
-  const contribId = await insertContribution(basketId, ctx.userId, amount);
+  await ensureMember(basketId, ctx.userId, logCtx);
+  const contribId = await insertContribution(
+    basketId,
+    ctx.userId,
+    amount,
+    logCtx,
+  );
   if (!contribId) {
-    await sendText(ctx.phone, "Could not submit contribution. Try later.");
+    await replyText(ctx, "Could not submit contribution. Try later.");
     await startBaskets(ctx);
     return;
   }
-  const basket = await fetchBasket(basketId);
+  const basket = await fetchBasket(basketId, logCtx);
   if (basket) {
-    await notifyCreatorOfContribution(basket, contribId, amount, ctx.phone);
-  }
-  await sendText(ctx.phone, "Contribution submitted for approval.");
+    await notifyCreatorOfContribution(
+      ctx,
+      basket,
+      contribId,
+      amount,
+      ctx.phone,
+    );
+  }
+  await replyText(ctx, "Contribution submitted for approval.");
   await clearState(ctx.userId);
   await startBaskets(ctx);
 }
 
 export async function handleBasketButton(ctx: ConversationContext, id: string) {
+  const logCtx = ctxFromConversation(ctx);
   if (id.startsWith("bk_det_")) {
     const basketId = id.replace("bk_det_", "");
-    const basket = await fetchBasket(basketId);
+    const basket = await fetchBasket(basketId, logCtx);
     if (!basket) {
-      await sendText(ctx.phone, "Basket not found.");
+      await replyText(ctx, "Basket not found.");
       return;
     }
-    await sendText(ctx.phone, `Basket: ${basket.name}\nType: ${basket.type}\nStatus: ${basket.status}\nDescription: ${basket.description ?? "(none)"}`);
+    await replyText(
+      ctx,
+      `Basket: ${basket.name}\nType: ${basket.type}\nStatus: ${basket.status}\nDescription: ${
+        basket.description ?? "(none)"
+      }`,
+    );
     return;
   }
   if (id.startsWith("bk_cont_")) {
     const basketId = id.replace("bk_cont_", "");
-    await sendText(ctx.phone, "Enter contribution amount (RWF).");
+    await replyText(ctx, "Enter contribution amount (RWF).");
     await setState(ctx.userId, "await_contrib_amount", { basket_id: basketId });
     ctx.state = { key: "await_contrib_amount", data: { basket_id: basketId } };
     return;
   }
   if (id.startsWith("bk_share_")) {
     const basketId = id.replace("bk_share_", "");
-    const basket = await fetchBasket(basketId);
+    const basket = await fetchBasket(basketId, logCtx);
     if (!basket) {
-      await sendText(ctx.phone, "Basket not found.");
+      await replyText(ctx, "Basket not found.");
       return;
     }
-    await sendShareLinks(ctx.phone, basket);
+    await sendShareLinks(ctx, basket);
     return;
   }
   if (id.startsWith("bk_qr_")) {
     const basketId = id.replace("bk_qr_", "");
-    const basket = await fetchBasket(basketId);
+    const basket = await fetchBasket(basketId, logCtx);
     if (!basket) {
-      await sendText(ctx.phone, "Basket not found.");
+      await replyText(ctx, "Basket not found.");
       return;
     }
     const { prefill } = buildSharePayload(basket);
     const link = await buildShareLink(undefined, prefill);
     const qr = await buildShareQR(link);
-    await sendImageUrl(ctx.phone, qr, `${basket.name} basket QR`);
+    await replyImage(ctx, qr, `${basket.name} basket QR`);
     return;
   }
   if (id.startsWith("bk_mems_")) {
     const [, basketId, pageRaw] = id.split("_");
-    const basket = await fetchBasket(basketId);
+    const basket = await fetchBasket(basketId, logCtx);
     if (!basket) {
-      await sendText(ctx.phone, "Basket not found.");
+      await replyText(ctx, "Basket not found.");
       return;
     }
     const page = Number.parseInt(pageRaw ?? "0", 10) || 0;
@@ -592,86 +779,103 @@ export async function handleBasketButton(ctx: ConversationContext, id: string) {
   }
   if (id.startsWith("bk_join_")) {
     const basketId = id.replace("bk_join_", "");
-    await ensureMember(basketId, ctx.userId);
-    await sendText(ctx.phone, "Joined the basket successfully.");
+    await ensureMember(basketId, ctx.userId, logCtx);
+    await replyText(ctx, "Joined the basket successfully.");
     return;
   }
   if (id.startsWith("bk_leave_")) {
     const basketId = id.replace("bk_leave_", "");
-    await removeMember(basketId, ctx.userId);
-    await sendText(ctx.phone, "You have left the basket.");
+    await removeMember(basketId, ctx.userId, logCtx);
+    await replyText(ctx, "You have left the basket.");
     return;
   }
   if (id.startsWith("bk_close_")) {
     const basketId = id.replace("bk_close_", "");
-    const basket = await fetchBasket(basketId);
+    const basket = await fetchBasket(basketId, logCtx);
     if (!basket || basket.creator_id !== ctx.userId) {
-      await sendText(ctx.phone, "Only the creator can close this basket.");
+      await replyText(ctx, "Only the creator can close this basket.");
       return;
     }
     try {
       await sb.from("baskets").update({ status: "closed" }).eq("id", basketId);
-      await sendText(ctx.phone, "Basket closed.");
+      await replyText(ctx, "Basket closed.");
     } catch (err) {
-      console.error("close basket failed", err);
-      await sendText(ctx.phone, "Could not close basket.");
+      logError("BASKET_CLOSE_FAILED", err, { basketId }, logCtx);
+      await replyText(ctx, "Could not close basket.");
     }
     return;
   }
   if (id.startsWith("bk_appr_")) {
     const contribId = parseContributionId(id);
-    const contrib = await fetchContribution(contribId);
+    const contrib = await fetchContribution(contribId, logCtx);
     if (!contrib) {
-      await sendText(ctx.phone, "Contribution not found.");
+      await replyText(ctx, "Contribution not found.");
       return;
     }
-    const basket = await fetchBasket(contrib.basket_id);
+    const basket = await fetchBasket(contrib.basket_id, logCtx);
     if (!basket || basket.creator_id !== ctx.userId) {
-      await sendText(ctx.phone, "Only the creator can approve contributions.");
+      await replyText(ctx, "Only the creator can approve contributions.");
       return;
     }
-    await updateContributionStatus(contribId, "approved", ctx.userId);
-    await incrementMemberTotal(contrib.basket_id, contrib.contributor_user_id, contrib.amount_rwf);
-    await notifyContributor(contrib, "✅ Contribution approved! Thank you.");
-    await sendText(ctx.phone, "Contribution approved.");
+    await updateContributionStatus(contribId, "approved", ctx.userId, logCtx);
+    await incrementMemberTotal(
+      contrib.basket_id,
+      contrib.contributor_user_id,
+      contrib.amount_rwf,
+      logCtx,
+    );
+    await notifyContributor(
+      ctx,
+      contrib,
+      "✅ Contribution approved! Thank you.",
+    );
+    await replyText(ctx, "Contribution approved.");
     return;
   }
   if (id.startsWith("bk_rej_")) {
     const contribId = parseContributionId(id);
-    const contrib = await fetchContribution(contribId);
+    const contrib = await fetchContribution(contribId, logCtx);
     if (!contrib) {
-      await sendText(ctx.phone, "Contribution not found.");
+      await replyText(ctx, "Contribution not found.");
       return;
     }
-    const basket = await fetchBasket(contrib.basket_id);
+    const basket = await fetchBasket(contrib.basket_id, logCtx);
     if (!basket || basket.creator_id !== ctx.userId) {
-      await sendText(ctx.phone, "Only the creator can reject contributions.");
+      await replyText(ctx, "Only the creator can reject contributions.");
       return;
     }
-    await updateContributionStatus(contribId, "rejected", ctx.userId);
-    await notifyContributor(contrib, "❌ Contribution rejected by the basket creator.");
-    await sendText(ctx.phone, "Contribution rejected.");
+    await updateContributionStatus(contribId, "rejected", ctx.userId, logCtx);
+    await notifyContributor(
+      ctx,
+      contrib,
+      "❌ Contribution rejected by the basket creator.",
+    );
+    await replyText(ctx, "Contribution rejected.");
     return;
   }
 }
 
-export async function handleBasketTypeButton(ctx: ConversationContext, id: string) {
+export async function handleBasketTypeButton(
+  ctx: ConversationContext,
+  id: string,
+) {
   if (id === "bk_type_public" || id === "bk_type_private") {
     await handleBasketType(ctx, id);
   }
 }
 
 export async function handleJoinToken(ctx: ConversationContext, token: string) {
+  const logCtx = ctxFromConversation(ctx);
   if (!token) {
-    await sendText(ctx.phone, "Invalid code.");
+    await replyText(ctx, "Invalid code.");
     return;
   }
-  const basket = await fetchBasketByToken(token);
+  const basket = await fetchBasketByToken(token, logCtx);
   if (!basket) {
-    await sendText(ctx.phone, "No basket found for that code.");
+    await replyText(ctx, "No basket found for that code.");
     return;
   }
-  await ensureMember(basket.id, ctx.userId);
-  await sendText(ctx.phone, `Joined basket ${basket.name}.`);
+  await ensureMember(basket.id, ctx.userId, logCtx);
+  await replyText(ctx, `Joined basket ${basket.name}.`);
   await showBasketActions(ctx, basket);
 }
diff --git a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/home.ts b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/home.ts
index b989977..5cd7278 100644
--- a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/home.ts
+++ b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/home.ts
@@ -1,6 +1,8 @@
 import { sendButtons, sendImageUrl, sendList, sendText } from "../wa/client.ts";
 import { safeButtonTitle, safeRowDesc, safeRowTitle } from "../utils/text.ts";
 import { buildShareLink, buildShareQR } from "../utils/share.ts";
+import { ctxFromConversation, logError } from "../utils/logger.ts";
+import { ConversationContext } from "../state/types.ts";
 
 const MENU_ROWS = [
   { id: "see_drivers", title: "Nearby Drivers" },
@@ -19,8 +21,9 @@ const SHARE_BUTTONS = [
 
 export const HOME_MENU_IDS = MENU_ROWS.map((row) => row.id);
 
-export async function sendHome(to: string) {
-  await sendList(to, {
+export async function sendHome(ctx: ConversationContext) {
+  const logCtx = ctxFromConversation(ctx);
+  await sendList(ctx.phone, {
     title: "easyMO",
     body: "What would you like to do?",
     buttonText: "Open Menu",
@@ -30,30 +33,43 @@ export async function sendHome(to: string) {
       title: safeRowTitle(row.title),
       description: safeRowDesc(""),
     })),
-  });
+  }, logCtx);
 
-  await sendButtons(to, "Love easyMO??? Share it!", SHARE_BUTTONS);
+  await sendButtons(
+    ctx.phone,
+    "Love easyMO??? Share it!",
+    SHARE_BUTTONS,
+    logCtx,
+  );
 }
 
-export async function handleShareButton(to: string, id: string) {
+export async function handleShareButton(ctx: ConversationContext, id: string) {
+  const logCtx = ctxFromConversation(ctx);
   const link = await buildShareLink();
   if (id === "share_link") {
-    await sendText(to, `Share easyMO with friends:\n${link}`);
+    await sendText(ctx.phone, `Share easyMO with friends:\n${link}`, logCtx);
     return;
   }
   if (id === "share_qr") {
     const qr = await buildShareQR(link);
     if (qr) {
       try {
-        await sendImageUrl(to, qr, "Scan to share easyMO");
+        await sendImageUrl(ctx.phone, qr, "Scan to share easyMO", logCtx);
       } catch (error) {
-        console.error("SHARE_QR_SEND_FAILED", error);
+        logError("SHARE_QR_SEND_FAILED", error, {}, logCtx);
       }
     }
-    await sendText(to, `Share easyMO with friends:\n${link}`);
+    await sendText(ctx.phone, `Share easyMO with friends:\n${link}`, logCtx);
   }
 }
 
-export async function handleHomeSelection(to: string, id: string) {
-  await sendText(to, "Thanks for your interest! We'll keep you posted.");
+export async function handleHomeSelection(
+  ctx: ConversationContext,
+  id: string,
+) {
+  await sendText(
+    ctx.phone,
+    "Thanks for your interest! We'll keep you posted.",
+    ctxFromConversation(ctx),
+  );
 }
diff --git a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/insurance.ts b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/insurance.ts
index 6356ceb..c3ffefb 100644
--- a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/insurance.ts
+++ b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/insurance.ts
@@ -3,6 +3,8 @@ import { ConversationContext } from "../state/types.ts";
 import { clearState, setState } from "../state/store.ts";
 import { sb, OPENAI_API_KEY } from "../config.ts";
 import { fetchWAMedia, extOf } from "../utils/media.ts";
+import { logError, logInfo, ctxFromConversation } from "../utils/logger.ts";
+import type { LogContext } from "../utils/logger.ts";
 
 interface InsuranceLead {
   id: string;
@@ -34,7 +36,7 @@ async function getAdminNumbers(): Promise<string[]> {
     cachedAdmins = { numbers: nums, fetchedAt: now };
     return nums;
   } catch (err) {
-    console.error("getAdminNumbers failed", err);
+    logError("INSURANCE_ADMIN_FETCH_FAILED", err);
     cachedAdmins = { numbers: [], fetchedAt: now };
     return [];
   }
@@ -53,9 +55,9 @@ async function upsertLead(phone: string): Promise<InsuranceLead> {
   return insert.data as InsuranceLead;
 }
 
-async function callOpenAI(url: string): Promise<{ raw: string | null; extracted: Record<string, unknown> | null }> {
+async function callOpenAI(url: string, logCtx: LogContext): Promise<{ raw: string | null; extracted: Record<string, unknown> | null }> {
   if (!OPENAI_API_KEY) {
-    console.error("MISSING_OPENAI_API_KEY");
+    logError("INSURANCE_OPENAI_MISSING_KEY", new Error("OPENAI_API_KEY missing"), {}, logCtx);
     return { raw: null, extracted: null };
   }
   try {
@@ -77,7 +79,10 @@ async function callOpenAI(url: string): Promise<{ raw: string | null; extracted:
     });
     if (!response.ok) {
       const text = await response.text();
-      console.error("OpenAI error", text);
+      logError("INSURANCE_OPENAI_HTTP_ERROR", new Error("OpenAI HTTP error"), {
+        status: response.status,
+        body: text,
+      }, logCtx);
       return { raw: null, extracted: null };
     }
     const json = await response.json();
@@ -85,10 +90,20 @@ async function callOpenAI(url: string): Promise<{ raw: string | null; extracted:
     if (typeof content !== "string") {
       return { raw: null, extracted: null };
     }
-    const parsed = JSON.parse(content);
-    return { raw: content, extracted: normalizeExtracted(parsed) };
+    try {
+      const parsed = JSON.parse(content);
+      const normalized = normalizeExtracted(parsed);
+      logInfo("INSURANCE_OCR_RESULT", {
+        hasRaw: Boolean(content),
+        hasExtracted: Object.keys(normalized).length > 0,
+      }, logCtx);
+      return { raw: content, extracted: normalized };
+    } catch (parseErr) {
+      logError("INSURANCE_OCR_PARSE_FAILED", parseErr, {}, logCtx);
+      return { raw: content, extracted: null };
+    }
   } catch (err) {
-    console.error("callOpenAI failed", err);
+    logError("INSURANCE_OPENAI_FAILED", err, {}, logCtx);
     return { raw: null, extracted: null };
   }
 }
@@ -149,14 +164,14 @@ function summaryFromExtracted(extracted: Record<string, unknown> | null): string
 }
 
 export async function startInsurance(ctx: ConversationContext) {
-  await sendText(ctx.phone, "Please send a clear photo or PDF of your insurance document.");
+  await sendText(ctx.phone, "Please send a clear photo or PDF of your insurance document.", ctxFromConversation(ctx));
   await setState(ctx.userId, "ins_wait_doc", {});
   ctx.state = { key: "ins_wait_doc", data: {} };
 }
 
 export async function handleInsuranceText(ctx: ConversationContext, text: string): Promise<boolean> {
   if (ctx.state.key !== "ins_wait_doc") return false;
-  await sendText(ctx.phone, "Send a photo or PDF of the insurance document to proceed.");
+  await sendText(ctx.phone, "Send a photo or PDF of the insurance document to proceed.", ctxFromConversation(ctx));
   return true;
 }
 
@@ -164,11 +179,12 @@ export async function handleInsuranceMedia(ctx: ConversationContext, message: an
   const mediaId: string | undefined = message?.image?.id ?? message?.document?.id;
   const mimeType: string | undefined = message?.image?.mime_type ?? message?.document?.mime_type ?? message?.document?.mime_type ?? "application/octet-stream";
   if (!mediaId) {
-    await sendText(ctx.phone, "Could not process the attachment. Please try again.");
+    await sendText(ctx.phone, "Could not process the attachment. Please try again.", ctxFromConversation(ctx));
     return;
   }
 
   try {
+    const ctxLog = ctxFromConversation(ctx);
     const lead = await upsertLead(ctx.phone);
     const media = await fetchWAMedia(mediaId);
     const resolvedMime = media.mimeType || mimeType || "application/octet-stream";
@@ -182,7 +198,7 @@ export async function handleInsuranceMedia(ctx: ConversationContext, message: an
     if (upload.error) {
       const message = (upload.error as { message?: string } | null | undefined)?.message?.toLowerCase() ?? "";
       if (message.includes("bucket")) {
-        console.error("MISSING_STORAGE_BUCKET", upload.error);
+        logError("INSURANCE_STORAGE_BUCKET_MISSING", upload.error, {}, ctxLog);
       }
       throw upload.error;
     }
@@ -197,11 +213,11 @@ export async function handleInsuranceMedia(ctx: ConversationContext, message: an
 
     const signed = await sb.storage.from("insurance").createSignedUrl(path, 60 * 60 * 24);
     if (signed.error) {
-      console.error("INSURANCE_SIGNED_URL_FAILED", signed.error);
+      logError("INSURANCE_SIGNED_URL_FAILED", signed.error, { path }, ctxLog);
     }
     const signedUrl = signed.error ? null : signed.data?.signedUrl ?? null;
 
-    const { raw, extracted } = signedUrl ? await callOpenAI(signedUrl) : { raw: null, extracted: null };
+    const { raw, extracted } = signedUrl ? await callOpenAI(signedUrl, ctxLog) : { raw: null, extracted: null };
 
     await sb
       .from("insurance_leads")
@@ -213,18 +229,18 @@ export async function handleInsuranceMedia(ctx: ConversationContext, message: an
       .eq("id", lead.id);
 
     const summary = summaryFromExtracted(extracted);
-    await sendText(ctx.phone, `${summary}\n\nOur team will contact you soon.`);
+    await sendText(ctx.phone, `${summary}\n\nOur team will contact you soon.`, ctxLog);
 
     const adminNumbers = await getAdminNumbers();
     const adminSummary = `New insurance lead\nFrom: ${ctx.phone}\n${summary}\nDocument link: ${signedUrl ?? "(no link)"}`;
     for (const admin of adminNumbers) {
       const trimmed = String(admin ?? "").trim();
       if (!trimmed) continue;
-      await sendText(trimmed, adminSummary);
+      await sendText(trimmed, adminSummary, ctxLog);
     }
   } catch (err) {
-    console.error("handleInsuranceMedia failed", err);
-    await sendText(ctx.phone, "We couldn't process that file. Please try again or contact support.");
+    logError("INSURANCE_MEDIA_FAILED", err, {}, ctxFromConversation(ctx));
+    await sendText(ctx.phone, "We couldn't process that file. Please try again or contact support.", ctxFromConversation(ctx));
   } finally {
     await clearState(ctx.userId);
   }
diff --git a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/marketplace.ts b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/marketplace.ts
index 512ece7..eb4125f 100644
--- a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/marketplace.ts
+++ b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/marketplace.ts
@@ -9,6 +9,7 @@ import {
   insertBusiness,
   rpcNearbyBusinesses,
 } from "../rpc/marketplace.ts";
+import { ctxFromConversation } from "../utils/logger.ts";
 
 interface MarketplaceState {
   mode?: "create" | "discover";
@@ -39,8 +40,20 @@ function toWaDigits(value: string | undefined): string {
   return e164(value).replace(/\D/g, "");
 }
 
+function replyText(ctx: ConversationContext, body: string) {
+  return sendText(ctx.phone, body, ctxFromConversation(ctx));
+}
+
+function replyButtons(ctx: ConversationContext, body: string, buttons: Parameters<typeof sendButtons>[2]) {
+  return sendButtons(ctx.phone, body, buttons, ctxFromConversation(ctx));
+}
+
+function replyList(ctx: ConversationContext, options: Parameters<typeof sendList>[1]) {
+  return sendList(ctx.phone, options, ctxFromConversation(ctx));
+}
+
 export async function startMarketplace(ctx: ConversationContext) {
-  await sendButtons(ctx.phone, "Marketplace options", [
+  await replyButtons(ctx, "Marketplace options", [
     { id: "mk_add", title: "Create Business" },
     { id: "mk_see", title: "Discover" },
   ]);
@@ -49,14 +62,14 @@ export async function startMarketplace(ctx: ConversationContext) {
 }
 
 async function promptCategory(ctx: ConversationContext, mode: "create" | "discover") {
-  const categories = await fetchMarketplaceCategories();
+  const categories = await fetchMarketplaceCategories(ctxFromConversation(ctx));
   if (!categories.length) {
-    await sendText(ctx.phone, "No categories available right now.");
+    await replyText(ctx, "No categories available right now.");
     await setState(ctx.userId, "home", {});
     ctx.state = { key: "home", data: {} };
     return;
   }
-  await sendList(ctx.phone, {
+  await replyList(ctx, {
     title: "Marketplace Categories",
     body: mode === "create" ? "Pick a category for your business." : "Which category do you want to browse?",
     buttonText: "Choose",
@@ -89,7 +102,7 @@ export async function handleCreateCategory(ctx: ConversationContext, id: string)
     await startMarketplace(ctx);
     return;
   }
-  await sendText(ctx.phone, "Send the business name.");
+  await replyText(ctx, "Send the business name.");
   await setState(ctx.userId, "await_business_name", { category_id: catId });
   ctx.state = { key: "await_business_name", data: { category_id: catId } };
 }
@@ -100,7 +113,7 @@ export async function handleDiscoverCategory(ctx: ConversationContext, id: strin
     await startMarketplace(ctx);
     return;
   }
-  await sendText(ctx.phone, "Share your location to discover nearby businesses.");
+  await replyText(ctx, "Share your location to discover nearby businesses.");
   await setState(ctx.userId, "await_market_see_loc", { category_id: catId });
   ctx.state = { key: "await_market_see_loc", data: { category_id: catId } };
 }
@@ -112,7 +125,7 @@ export async function handleBusinessName(ctx: ConversationContext, text: string)
     return;
   }
   const data = { ...current, name: text.trim() };
-  await sendText(ctx.phone, "Optional: send a short description.");
+  await replyText(ctx, "Optional: send a short description.");
   await setState(ctx.userId, "await_business_desc", data);
   ctx.state = { key: "await_business_desc", data };
 }
@@ -124,8 +137,8 @@ export async function handleBusinessDesc(ctx: ConversationContext, text: string)
     return;
   }
   const data = { ...current, description: text.trim() };
-  await sendText(ctx.phone, "Share a catalog URL or tap Skip.");
-  await sendButtons(ctx.phone, "Catalog link?", [
+  await replyText(ctx, "Share a catalog URL or tap Skip.");
+  await replyButtons(ctx, "Catalog link?", [
     { id: "biz_catalog_skip", title: "Skip" },
   ]);
   await setState(ctx.userId, "await_business_catalog", data);
@@ -140,7 +153,7 @@ export async function handleBusinessCatalog(ctx: ConversationContext, text: stri
   }
   const normalized = text.trim();
   if (!normalized) {
-    await sendText(ctx.phone, "Please send a valid URL or tap Skip.");
+    await replyText(ctx, "Please send a valid URL or tap Skip.");
     return;
   }
   if (normalized.toLowerCase() === "skip") {
@@ -148,7 +161,7 @@ export async function handleBusinessCatalog(ctx: ConversationContext, text: stri
     return;
   }
   const data = { ...current, catalog_url: normalized };
-  await sendText(ctx.phone, "Share your business location.");
+  await replyText(ctx, "Share your business location.");
   await setState(ctx.userId, "await_business_location", data);
   ctx.state = { key: "await_business_location", data };
 }
@@ -160,7 +173,7 @@ export async function handleCatalogSkip(ctx: ConversationContext) {
     return;
   }
   const data = { ...current, catalog_url: null };
-  await sendText(ctx.phone, "Share your business location.");
+  await replyText(ctx, "Share your business location.");
   await setState(ctx.userId, "await_business_location", data);
   ctx.state = { key: "await_business_location", data };
 }
@@ -180,15 +193,15 @@ export async function handleBusinessLocation(ctx: ConversationContext, lat: numb
     description: current.description ?? null,
     catalog_url: current.catalog_url ?? null,
     geo,
-  });
+  }, ctxFromConversation(ctx));
 
   if (!id) {
-    await sendText(ctx.phone, "Could not save business. Try again later.");
+    await replyText(ctx, "Could not save business. Try again later.");
     await startMarketplace(ctx);
     return;
   }
 
-  await sendText(ctx.phone, "Business submitted! We'll review it shortly.");
+  await replyText(ctx, "Business submitted! We'll review it shortly.");
   await setState(ctx.userId, "home", {});
   ctx.state = { key: "home", data: {} };
 }
@@ -200,10 +213,10 @@ export async function handleDiscoverLocation(ctx: ConversationContext, lat: numb
     return;
   }
 
-  const rows = await rpcNearbyBusinesses(lat, lon, ctx.phone, 20);
+  const rows = await rpcNearbyBusinesses(lat, lon, ctx.phone, 20, ctxFromConversation(ctx));
   const filtered = rows.filter((row) => row.category_id === current.category_id);
   if (!filtered.length) {
-    await sendText(ctx.phone, "No businesses nearby for that category right now.");
+    await replyText(ctx, "No businesses nearby for that category right now.");
     await setState(ctx.userId, "home", {});
     ctx.state = { key: "home", data: {} };
     return;
@@ -217,7 +230,7 @@ export async function handleDiscoverLocation(ctx: ConversationContext, lat: numb
     catalog_url: row.catalog_url ?? null,
   }));
 
-  await sendList(ctx.phone, {
+  await replyList(ctx, {
     title: "Nearby Businesses",
     body: `Found ${options.length} result(s). Choose one for actions.`,
     buttonText: "View",
@@ -242,11 +255,11 @@ export async function handleBusinessAction(ctx: ConversationContext, id: string)
     const current = ctx.state.data as MarketplaceState | undefined;
     const option = current?.temp_results?.[idx];
     if (!option || option.id !== bizId) {
-      await sendText(ctx.phone, "Business not available now.");
+      await replyText(ctx, "Business not available now.");
       return;
     }
 
-    await sendButtons(ctx.phone, option.name, [
+    await replyButtons(ctx, option.name, [
       { id: `biz_contact_${bizId}`, title: "Contact" },
       { id: `biz_catalog_${bizId}`, title: "View Catalog" },
     ]);
@@ -255,23 +268,23 @@ export async function handleBusinessAction(ctx: ConversationContext, id: string)
 
   if (id.startsWith("biz_contact_")) {
     const bizId = id.replace("biz_contact_", "");
-    const business = await fetchBusinessById(bizId);
+    const business = await fetchBusinessById(bizId, ctxFromConversation(ctx));
     const digits = toWaDigits(business?.owner_whatsapp);
     if (!digits) {
-      await sendText(ctx.phone, "Contact unavailable.");
+      await replyText(ctx, "Contact unavailable.");
       return;
     }
-    await sendText(ctx.phone, `Open chat: https://wa.me/${digits}`);
+    await replyText(ctx, `Open chat: https://wa.me/${digits}`);
     return;
   }
 
   if (id.startsWith("biz_catalog_")) {
     const bizId = id.replace("biz_catalog_", "");
-    const business = await fetchBusinessById(bizId);
+    const business = await fetchBusinessById(bizId, ctxFromConversation(ctx));
     if (!business?.catalog_url) {
-      await sendText(ctx.phone, "No catalog link provided.");
+      await replyText(ctx, "No catalog link provided.");
       return;
     }
-    await sendText(ctx.phone, business.catalog_url);
+    await replyText(ctx, business.catalog_url);
   }
 }
diff --git a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/nearby.ts b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/nearby.ts
index ce24696..f6998ad 100644
--- a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/nearby.ts
+++ b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/nearby.ts
@@ -11,6 +11,7 @@ import {
   NearbyDriverRow,
   NearbyPassengerRow,
 } from "../rpc/nearby.ts";
+import { ctxFromConversation } from "../utils/logger.ts";
 
 interface DriverOption {
   title: string;
@@ -104,7 +105,7 @@ async function askForVehicle(ctx: ConversationContext, kind: "drivers" | "passen
       title: safeRowTitle(row.title),
       description: safeRowDesc(""),
     })),
-  });
+  }, ctxFromConversation(ctx));
 }
 
 export async function startNearbyDrivers(ctx: ConversationContext) {
@@ -123,29 +124,29 @@ export async function handleDriverVehicleChoice(ctx: ConversationContext, id: st
   const vehicle = vehicleFromId(id);
   await setState(ctx.userId, "near_await_loc_drivers", { vehicle_type: vehicle });
   ctx.state = { key: "near_await_loc_drivers", data: { vehicle_type: vehicle } };
-  await sendText(ctx.phone, "Share your live location to see nearby drivers.");
+  await sendText(ctx.phone, "Share your live location to see nearby drivers.", ctxFromConversation(ctx));
 }
 
 export async function handlePassengerVehicleChoice(ctx: ConversationContext, id: string) {
   const vehicle = vehicleFromId(id);
   await setState(ctx.userId, "near_await_loc_passengers", { vehicle_type: vehicle });
   ctx.state = { key: "near_await_loc_passengers", data: { vehicle_type: vehicle } };
-  await sendText(ctx.phone, "Share your live location to find passengers near you.");
+  await sendText(ctx.phone, "Share your live location to find passengers near you.", ctxFromConversation(ctx));
 }
 
 export async function handleDriverLocation(ctx: ConversationContext, lat: number, lon: number) {
   const current = (ctx.state.data as NearbyState<DriverOption> | undefined) ?? {};
   const vehicle = current.vehicle_type ?? "";
   if (!vehicle) {
-    await sendText(ctx.phone, "Please choose a vehicle type first.");
+    await sendText(ctx.phone, "Please choose a vehicle type first.", ctxFromConversation(ctx));
     await startNearbyDrivers(ctx);
     return;
   }
 
-  const rows = await rpcNearbyDriversByVehicle(lat, lon, ctx.phone, vehicle, 10);
+  const rows = await rpcNearbyDriversByVehicle(lat, lon, ctx.phone, vehicle, 10, ctxFromConversation(ctx));
   const options = makeDriverOptions(rows);
   if (!options.length) {
-    await sendText(ctx.phone, "No drivers nearby for that vehicle right now. Try again soon.");
+    await sendText(ctx.phone, "No drivers nearby for that vehicle right now. Try again soon.", ctxFromConversation(ctx));
     await setState(ctx.userId, "home", {});
     ctx.state = { key: "home", data: {} };
     return;
@@ -161,7 +162,7 @@ export async function handleDriverLocation(ctx: ConversationContext, lat: number
       title: safeRowTitle(option.title),
       description: safeRowDesc(option.description),
     })),
-  });
+  }, ctxFromConversation(ctx));
 
   const nextState: NearbyState<DriverOption> = {
     vehicle_type: vehicle,
@@ -175,15 +176,15 @@ export async function handlePassengerLocation(ctx: ConversationContext, lat: num
   const current = (ctx.state.data as NearbyState<PassengerOption> | undefined) ?? {};
   const vehicle = current.vehicle_type ?? "";
   if (!vehicle) {
-    await sendText(ctx.phone, "Please choose a vehicle type first.");
+    await sendText(ctx.phone, "Please choose a vehicle type first.", ctxFromConversation(ctx));
     await startNearbyPassengers(ctx);
     return;
   }
 
-  const rows = await rpcNearbyPassengersByVehicle(lat, lon, ctx.phone, vehicle, 10);
+  const rows = await rpcNearbyPassengersByVehicle(lat, lon, ctx.phone, vehicle, 10, ctxFromConversation(ctx));
   const options = makePassengerOptions(rows);
   if (!options.length) {
-    await sendText(ctx.phone, "No passengers nearby for that vehicle right now. Try again soon.");
+    await sendText(ctx.phone, "No passengers nearby for that vehicle right now. Try again soon.", ctxFromConversation(ctx));
     await setState(ctx.userId, "home", {});
     ctx.state = { key: "home", data: {} };
     return;
@@ -199,7 +200,7 @@ export async function handlePassengerLocation(ctx: ConversationContext, lat: num
       title: safeRowTitle(option.title),
       description: safeRowDesc(option.description),
     })),
-  });
+  }, ctxFromConversation(ctx));
 
   const nextState: NearbyState<PassengerOption> = {
     vehicle_type: vehicle,
@@ -214,18 +215,18 @@ export async function handleDriverSelection(ctx: ConversationContext, id: string
   const current = (ctx.state.data as NearbyState<DriverOption> | undefined) ?? {};
   const option = current.results?.[index];
   if (!option) {
-    await sendText(ctx.phone, "Driver no longer available.");
+    await sendText(ctx.phone, "Driver no longer available.", ctxFromConversation(ctx));
     return;
   }
 
   const digits = option.wa.replace(/\D/g, "");
   if (!digits) {
-    await sendText(ctx.phone, "Driver contact unavailable. Try another option.");
+    await sendText(ctx.phone, "Driver contact unavailable. Try another option.", ctxFromConversation(ctx));
     return;
   }
 
-  await sendText(ctx.phone, `Open chat: https://wa.me/${digits}`);
-  await markServedDriver(ctx.phone, option.driver_user_id ?? null);
+  await sendText(ctx.phone, `Open chat: https://wa.me/${digits}`, ctxFromConversation(ctx));
+  await markServedDriver(ctx.phone, option.driver_user_id ?? null, ctxFromConversation(ctx));
   await setState(ctx.userId, "home", {});
   ctx.state = { key: "home", data: {} };
 }
@@ -235,18 +236,18 @@ export async function handlePassengerSelection(ctx: ConversationContext, id: str
   const current = (ctx.state.data as NearbyState<PassengerOption> | undefined) ?? {};
   const option = current.results?.[index];
   if (!option) {
-    await sendText(ctx.phone, "Passenger no longer available.");
+    await sendText(ctx.phone, "Passenger no longer available.", ctxFromConversation(ctx));
     return;
   }
 
   const digits = option.wa.replace(/\D/g, "");
   if (!digits) {
-    await sendText(ctx.phone, "Passenger contact unavailable right now.");
+    await sendText(ctx.phone, "Passenger contact unavailable right now.", ctxFromConversation(ctx));
     return;
   }
 
-  await sendText(ctx.phone, `Open chat: https://wa.me/${digits}`);
-  await markServedPassenger(ctx.phone, option.passenger_trip_id ?? null);
+  await sendText(ctx.phone, `Open chat: https://wa.me/${digits}`, ctxFromConversation(ctx));
+  await markServedPassenger(ctx.phone, option.passenger_trip_id ?? null, ctxFromConversation(ctx));
   await setState(ctx.userId, "home", {});
   ctx.state = { key: "home", data: {} };
 }
diff --git a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/qr.ts b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/qr.ts
index a43c401..03da270 100644
--- a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/qr.ts
+++ b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/qr.ts
@@ -5,6 +5,8 @@ import { getBotDigits } from "../utils/share.ts";
 import { to07FromE164 } from "../utils/phone.ts";
 import { sb } from "../config.ts";
 import { safeRowDesc, safeRowTitle, safeButtonTitle } from "../utils/text.ts";
+import { logError, ctxFromConversation } from "../utils/logger.ts";
+import type { LogContext } from "../utils/logger.ts";
 
 interface MomoQrState {
   kind?: "number" | "code";
@@ -33,6 +35,18 @@ function normalizeCode(input: string): string | null {
   return null;
 }
 
+function replyText(ctx: ConversationContext, body: string, logCtx?: LogContext) {
+  return sendText(ctx.phone, body, logCtx ?? ctxFromConversation(ctx));
+}
+
+function replyButtons(ctx: ConversationContext, body: string, buttons: Parameters<typeof sendButtons>[2], logCtx?: LogContext) {
+  return sendButtons(ctx.phone, body, buttons, logCtx ?? ctxFromConversation(ctx));
+}
+
+function replyList(ctx: ConversationContext, options: Parameters<typeof sendList>[1], logCtx?: LogContext) {
+  return sendList(ctx.phone, options, logCtx ?? ctxFromConversation(ctx));
+}
+
 function buildUssd(kind: "number" | "code", value: string, amount: number | null): string {
   if (kind === "number") {
     return `*182*1*1*${value}${amount ? `*${amount}` : ""}#`;
@@ -58,6 +72,7 @@ async function logRequest(params: {
   tel: string;
   qr: string;
   share: string;
+  logCtx: LogContext;
 }) {
   try {
     await sb.from("momo_qr_requests").insert({
@@ -73,7 +88,10 @@ async function logRequest(params: {
       created_at: new Date().toISOString(),
     });
   } catch (err) {
-    console.error("momo_qr_requests insert failed", err);
+    logError("MOMO_QR_LOG_FAILED", err, {
+      userId: params.userId,
+      kind: params.kind,
+    }, params.logCtx);
   }
 }
 
@@ -85,16 +103,16 @@ function sleep(ms: number) {
 
 async function sendQrImage(ctx: ConversationContext, qr: string, caption: string): Promise<boolean> {
   try {
-    await sendImageUrl(ctx.phone, qr, caption);
+    await sendImageUrl(ctx.phone, qr, caption, ctxFromConversation(ctx));
     return true;
   } catch (error) {
-    console.error("MOMO_QR_IMAGE_SEND_FAILED", error);
+    logError("MOMO_QR_IMAGE_SEND_FAILED", error, {}, ctxFromConversation(ctx));
     return false;
   }
 }
 
 export async function startMomoQr(ctx: ConversationContext) {
-  await sendList(ctx.phone, {
+  await replyList(ctx, {
     title: "MoMo QR",
     body: "Choose how to generate your QR.",
     buttonText: "Choose",
@@ -115,8 +133,8 @@ export async function startMomoQr(ctx: ConversationContext) {
 
 
 async function promptAmount(ctx: ConversationContext, state: MomoQrState, label: string) {
-  await sendText(ctx.phone, `Enter amount in RWF for ${label}, or tap Skip.`);
-  await sendButtons(ctx.phone, "Amount options", [
+  await replyText(ctx, `Enter amount in RWF for ${label}, or tap Skip.`);
+  await replyButtons(ctx, "Amount options", [
     { id: "mqr_amt_skip", title: safeButtonTitle("Skip") },
     { id: "back_home", title: safeButtonTitle("Back") },
   ]);
@@ -131,6 +149,7 @@ async function generateAndSendMomoQR(ctx: ConversationContext, state: MomoQrStat
   const tel = buildTelUri(ussd);
   const qr = buildQrUrl(ussd);
   const caption = kind === "number" ? `MoMo ${value}` : `MoMo code ${value}`;
+  const ctxLog = ctxFromConversation(ctx);
 
   if (!await sendQrImage(ctx, qr, caption)) {
     await sleep(SEND_DELAY_MS);
@@ -138,12 +157,12 @@ async function generateAndSendMomoQR(ctx: ConversationContext, state: MomoQrStat
   }
 
   await sleep(SEND_DELAY_MS);
-  await sendText(ctx.phone, `USSD: ${ussd}\nTap to dial: ${tel}\nShare: ${tel}`);
+  await replyText(ctx, `USSD: ${ussd}\nTap to dial: ${tel}\nShare: ${tel}`, ctxLog);
   await sleep(SEND_DELAY_MS);
-  await sendButtons(ctx.phone, "Need another?", [
+  await replyButtons(ctx, "Need another?", [
     { id: "mqr_again", title: safeButtonTitle("Generate another") },
     { id: "back_home", title: safeButtonTitle("Back to menu") },
-  ]);
+  ], ctxLog);
 
   await logRequest({
     userId: ctx.userId,
@@ -155,6 +174,7 @@ async function generateAndSendMomoQR(ctx: ConversationContext, state: MomoQrStat
     tel,
     qr,
     share: tel,
+    logCtx: ctxLog,
   });
 
   await setState(ctx.userId, "momoqr_start", {});
@@ -165,8 +185,8 @@ export async function handleMomoQrList(ctx: ConversationContext, id: string) {
   if (id === "mqr_use_wa") {
     const digits = await getBotDigits();
     if (!digits) {
-      await sendText(ctx.phone, "No WhatsApp number configured. Please enter a MoMo number instead.");
-      await sendText(ctx.phone, "Enter the MoMo number (07…)");
+      await replyText(ctx, "No WhatsApp number configured. Please enter a MoMo number instead.");
+      await replyText(ctx, "Enter the MoMo number (07…)");
       await setState(ctx.userId, "momoqr_await_number", {});
       ctx.state = { key: "momoqr_await_number", data: {} };
       return;
@@ -177,13 +197,13 @@ export async function handleMomoQrList(ctx: ConversationContext, id: string) {
     return;
   }
   if (id === "mqr_enter_num") {
-    await sendText(ctx.phone, "Enter the MoMo number (07…)");
+    await replyText(ctx, "Enter the MoMo number (07…)");
     await setState(ctx.userId, "momoqr_await_number", {});
     ctx.state = { key: "momoqr_await_number", data: {} };
     return;
   }
   if (id === "mqr_enter_code") {
-    await sendText(ctx.phone, "Enter the MoMo payment code (4–9 digits).");
+    await replyText(ctx, "Enter the MoMo payment code (4–9 digits).");
     await setState(ctx.userId, "momoqr_await_code", {});
     ctx.state = { key: "momoqr_await_code", data: {} };
   }
@@ -211,7 +231,7 @@ export async function handleMomoQrText(ctx: ConversationContext, text: string):
     case "momoqr_await_number": {
       const normalized = normalizeNumber(trimmed);
       if (!normalized) {
-        await sendText(ctx.phone, "Invalid number. Use format 07XXXXXXXX.");
+        await replyText(ctx, "Invalid number. Use format 07XXXXXXXX.");
         return true;
       }
       await promptAmount(ctx, { kind: "number", value: normalized }, normalized);
@@ -220,7 +240,7 @@ export async function handleMomoQrText(ctx: ConversationContext, text: string):
     case "momoqr_await_code": {
       const normalized = normalizeCode(trimmed);
       if (!normalized) {
-        await sendText(ctx.phone, "Invalid code. Enter 4–9 digits.");
+        await replyText(ctx, "Invalid code. Enter 4–9 digits.");
         return true;
       }
       await promptAmount(ctx, { kind: "code", value: normalized }, normalized);
@@ -238,7 +258,7 @@ export async function handleMomoQrText(ctx: ConversationContext, text: string):
       }
       const amount = Number.parseInt(trimmed.replace(/\D/g, ""), 10);
       if (!Number.isFinite(amount) || amount <= 0) {
-        await sendText(ctx.phone, "Enter a valid amount or type SKIP.");
+        await replyText(ctx, "Enter a valid amount or type SKIP.");
         return true;
       }
       const current = ctx.state.data as MomoQrState | undefined;
diff --git a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/schedule.ts b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/schedule.ts
index 6a119f6..53d8b3a 100644
--- a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/schedule.ts
+++ b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/flows/schedule.ts
@@ -5,6 +5,7 @@ import { sb } from "../config.ts";
 import { fmtKm, safeRowDesc, safeRowTitle } from "../utils/text.ts";
 import { to07FromE164 } from "../utils/phone.ts";
 import { rpcMatchDriversForTrip, rpcMatchPassengersForTrip, TripMatchRow } from "../rpc/match.ts";
+import { ctxFromConversation } from "../utils/logger.ts";
 
 interface ScheduleState {
   role?: "passenger" | "driver";
@@ -42,8 +43,20 @@ function vehicleFromId(id: string): string {
   return "others";
 }
 
+function replyText(ctx: ConversationContext, body: string) {
+  return sendText(ctx.phone, body, ctxFromConversation(ctx));
+}
+
+function replyButtons(ctx: ConversationContext, body: string, buttons: Parameters<typeof sendButtons>[2]) {
+  return sendButtons(ctx.phone, body, buttons, ctxFromConversation(ctx));
+}
+
+function replyList(ctx: ConversationContext, options: Parameters<typeof sendList>[1]) {
+  return sendList(ctx.phone, options, ctxFromConversation(ctx));
+}
+
 export async function startSchedule(ctx: ConversationContext) {
-  await sendList(ctx.phone, {
+  await replyList(ctx, {
     title: "Schedule Trip",
     body: "Who are you scheduling for?",
     buttonText: "Select",
@@ -60,7 +73,7 @@ export async function startSchedule(ctx: ConversationContext) {
 
 export async function handleRoleChoice(ctx: ConversationContext, id: string) {
   const role: "passenger" | "driver" = id === "role_driver" ? "driver" : "passenger";
-  await sendList(ctx.phone, {
+  await replyList(ctx, {
     title: "Select Vehicle",
     body: "Which vehicle type?",
     buttonText: "Choose",
@@ -86,7 +99,7 @@ export async function handleVehicleChoice(ctx: ConversationContext, id: string)
 
   const vehicle_type = vehicleFromId(id);
   const nextState: ScheduleState = { role, vehicle_type };
-  await sendText(ctx.phone, "Share pickup location to schedule your trip.");
+  await replyText(ctx, "Share pickup location to schedule your trip.");
   await setState(ctx.userId, "await_schedule_pickup", nextState);
   ctx.state = { key: "await_schedule_pickup", data: nextState };
 }
@@ -130,7 +143,7 @@ export async function handlePickupLocation(ctx: ConversationContext, lat: number
   }
 
   const tripId = await insertTrip(ctx.userId, role, vehicle_type, lon, lat);
-  await sendButtons(ctx.phone, "Add a drop-off point?", [
+  await replyButtons(ctx, "Add a drop-off point?", [
     { id: `sched_add_drop_${tripId}`, title: "Add Drop-off" },
     { id: `sched_skip_drop_${tripId}`, title: "Skip" },
   ]);
@@ -143,23 +156,24 @@ export async function handlePickupLocation(ctx: ConversationContext, lat: number
 export async function handleAddDropButton(ctx: ConversationContext, tripId: string) {
   const current = (ctx.state.data as ScheduleState | undefined) ?? {};
   if (!current.trip_id || current.trip_id !== tripId) {
-    await sendText(ctx.phone, "Trip session expired. Start again.");
+    await replyText(ctx, "Trip session expired. Start again.");
     await startSchedule(ctx);
     return;
   }
 
-  await sendText(ctx.phone, "Share the drop-off location.");
+  await replyText(ctx, "Share the drop-off location.");
   await setState(ctx.userId, "sched_await_drop", current);
   ctx.state = { key: "sched_await_drop", data: current };
 }
 
 async function matchTrips(ctx: ConversationContext, tripId: string, role: "passenger" | "driver", vehicle_type?: string) {
+  const logCtx = ctxFromConversation(ctx);
   const matches = role === "passenger"
-    ? await rpcMatchDriversForTrip(tripId, 10)
-    : await rpcMatchPassengersForTrip(tripId, 10);
+    ? await rpcMatchDriversForTrip(tripId, 10, logCtx)
+    : await rpcMatchPassengersForTrip(tripId, 10, logCtx);
 
   if (!matches.length) {
-    await sendText(ctx.phone, "No matches yet. We will notify you when someone is available.");
+    await replyText(ctx, "No matches yet. We will notify you when someone is available.");
     await setState(ctx.userId, "home", {});
     ctx.state = { key: "home", data: {} };
     return;
@@ -179,7 +193,7 @@ async function matchTrips(ctx: ConversationContext, tripId: string, role: "passe
     };
   });
 
-  await sendList(ctx.phone, {
+  await replyList(ctx, {
     title: "Possible Matches",
     body: `Here are ${options.length} match(es). Choose one to contact on WhatsApp.`,
     buttonText: "View",
@@ -199,7 +213,7 @@ async function matchTrips(ctx: ConversationContext, tripId: string, role: "passe
 export async function handleSkipDrop(ctx: ConversationContext, tripId: string) {
   const current = (ctx.state.data as ScheduleState | undefined) ?? {};
   if (!current.trip_id || current.trip_id !== tripId || !current.role) {
-    await sendText(ctx.phone, "Trip session expired. Start again.");
+    await replyText(ctx, "Trip session expired. Start again.");
     await startSchedule(ctx);
     return;
   }
@@ -210,7 +224,7 @@ export async function handleSkipDrop(ctx: ConversationContext, tripId: string) {
 export async function handleDropLocation(ctx: ConversationContext, lat: number, lon: number) {
   const current = (ctx.state.data as ScheduleState | undefined) ?? {};
   if (!current.trip_id || !current.role) {
-    await sendText(ctx.phone, "Trip session expired. Start again.");
+    await replyText(ctx, "Trip session expired. Start again.");
     await startSchedule(ctx);
     return;
   }
@@ -225,24 +239,24 @@ export async function handleMatchSelection(ctx: ConversationContext, id: string)
   const tripId = parts[2] ?? "";
   const current = (ctx.state.data as ScheduleState | undefined) ?? {};
   if (!current.trip_id || current.trip_id !== tripId) {
-    await sendText(ctx.phone, "Match expired. Start again.");
+    await replyText(ctx, "Match expired. Start again.");
     await startSchedule(ctx);
     return;
   }
 
   const option = current.results?.[index];
   if (!option) {
-    await sendText(ctx.phone, "Match unavailable. Try another option.");
+    await replyText(ctx, "Match unavailable. Try another option.");
     return;
   }
 
   const digits = option.wa.replace(/\D/g, "");
   if (!digits) {
-    await sendText(ctx.phone, "Contact unavailable at the moment.");
+    await replyText(ctx, "Contact unavailable at the moment.");
     return;
   }
 
-  await sendText(ctx.phone, `Open chat: https://wa.me/${digits}`);
+  await replyText(ctx, `Open chat: https://wa.me/${digits}`);
   await setState(ctx.userId, "home", {});
   ctx.state = { key: "home", data: {} };
 }
diff --git a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/index.ts b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/index.ts
index 365211e..7929c95 100644
--- a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/index.ts
+++ b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/index.ts
@@ -5,8 +5,8 @@ import { idempotent } from "./state/idempotency.ts";
 import { ensureProfile, getState } from "./state/store.ts";
 import { handleGlobalGuards } from "./router/guards.ts";
 import { route } from "./router/router.ts";
-import { sendHome } from "./flows/home.ts";
 import { ConversationContext } from "./state/types.ts";
+import { logError, logInfo, logWarn } from "./utils/logger.ts";
 
 function normalizePhone(raw: string | undefined): string {
   if (!raw) return "";
@@ -14,32 +14,72 @@ function normalizePhone(raw: string | undefined): string {
 }
 
 serve(async (req: Request) => {
+  const startedAt = Date.now();
+  const requestId = crypto.randomUUID();
+  const url = new URL(req.url);
+  const baseCtx = { requestId };
+
+  logInfo("WEBHOOK_REQUEST_RECEIVED", {
+    method: req.method,
+    path: url.pathname,
+  }, baseCtx);
+
   if (req.method === "GET") {
-    const url = new URL(req.url);
     const mode = url.searchParams.get("hub.mode");
     const token = url.searchParams.get("hub.verify_token");
     const challenge = url.searchParams.get("hub.challenge");
 
+    logInfo("WEBHOOK_VERIFY_ATTEMPT", {
+      mode,
+      hasChallenge: Boolean(challenge),
+    }, baseCtx);
+
     if (mode === "subscribe" && challenge && token === WA_VERIFY_TOKEN) {
-      console.log("WEBHOOK_VERIFY_SUCCESS", { mode });
+      logInfo("WEBHOOK_VERIFY_SUCCESS", { mode }, baseCtx);
+      logInfo("WEBHOOK_RESPONSE", {
+        status: 200,
+        durationMs: Date.now() - startedAt,
+        handledBy: "verify",
+      }, baseCtx);
       return new Response(challenge, {
         status: 200,
         headers: { "content-type": "text/plain; charset=utf-8" },
       });
     }
 
-    console.warn("WEBHOOK_VERIFY_FAILED", { mode, hasChallenge: Boolean(challenge) });
+    logWarn("WEBHOOK_VERIFY_FAILED", {
+      mode,
+      hasChallenge: Boolean(challenge),
+    }, baseCtx);
+    logInfo("WEBHOOK_RESPONSE", {
+      status: 403,
+      durationMs: Date.now() - startedAt,
+      handledBy: "verify",
+    }, baseCtx);
     return new Response("forbidden", { status: 403 });
   }
 
   if (req.method !== "POST") {
+    logWarn("WEBHOOK_METHOD_NOT_ALLOWED", { method: req.method }, baseCtx);
+    logInfo("WEBHOOK_RESPONSE", {
+      status: 405,
+      durationMs: Date.now() - startedAt,
+      handledBy: "method_not_allowed",
+    }, baseCtx);
     return new Response("method not allowed", { status: 405 });
   }
 
   const rawBody = await req.text();
-  const verified = await verifySignature(req, rawBody);
+  logInfo("WEBHOOK_BODY_READ", { bytes: rawBody.length }, baseCtx);
+
+  const verified = await verifySignature(req, rawBody, baseCtx);
   if (!verified) {
-    console.error("SIG_VERIFY_FAIL");
+    logWarn("SIG_VERIFY_FAIL", {}, baseCtx);
+    logInfo("WEBHOOK_RESPONSE", {
+      status: 401,
+      durationMs: Date.now() - startedAt,
+      handledBy: "signature",
+    }, baseCtx);
     return new Response("invalid signature", { status: 401 });
   }
 
@@ -47,32 +87,90 @@ serve(async (req: Request) => {
   try {
     payload = rawBody ? JSON.parse(rawBody) : {};
   } catch (error) {
-    console.error("JSON_PARSE_ERROR", error);
+    logError("WEBHOOK_JSON_PARSE_ERROR", error, {}, baseCtx);
+    logInfo("WEBHOOK_RESPONSE", {
+      status: 400,
+      durationMs: Date.now() - startedAt,
+      handledBy: "parse_error",
+    }, baseCtx);
     return new Response("invalid json", { status: 400 });
   }
 
   const message = payload?.entry?.[0]?.changes?.[0]?.value?.messages?.[0];
   if (!message) {
+    logInfo("WEBHOOK_NO_MESSAGE", {}, baseCtx);
+    logInfo("WEBHOOK_RESPONSE", {
+      status: 200,
+      durationMs: Date.now() - startedAt,
+      handledBy: "no_message",
+    }, baseCtx);
     return new Response("no message", { status: 200 });
   }
 
   const messageId: string | undefined = message?.id;
-  const isFresh = await idempotent(sb, messageId);
+  const from = normalizePhone(message.from);
+  logInfo("WEBHOOK_MESSAGE_CONTEXT", {
+    messageId,
+    from,
+    type: message?.type ?? "unknown",
+  }, baseCtx);
+
+  const isFresh = await idempotent(sb, messageId, { ...baseCtx, phone: from });
   if (!isFresh) {
-    console.log("IDEMPOTENT_DUPLICATE", { messageId });
+    const dupCtx = { requestId, phone: from };
+    logInfo("IDEMPOTENT_DUPLICATE", { messageId }, dupCtx);
+    logInfo("WEBHOOK_RESPONSE", {
+      status: 200,
+      durationMs: Date.now() - startedAt,
+      handledBy: "duplicate",
+    }, dupCtx);
     return new Response("duplicate", { status: 200 });
   }
 
-  const from = normalizePhone(message.from);
   if (!from) {
-    console.warn("MISSING_SENDER", { messageId });
+    logWarn("MISSING_SENDER", { messageId }, baseCtx);
+    logInfo("WEBHOOK_RESPONSE", {
+      status: 200,
+      durationMs: Date.now() - startedAt,
+      handledBy: "missing_sender",
+    }, baseCtx);
     return new Response("missing sender", { status: 200 });
   }
 
-  const profile = await ensureProfile(from);
-  const state = await getState(profile.user_id);
+  let profile;
+  try {
+    profile = await ensureProfile(from);
+  } catch (error) {
+    logError("PROFILE_ENSURE_FAILED", error, { phone: from }, baseCtx);
+    logInfo("WEBHOOK_RESPONSE", {
+      status: 500,
+      durationMs: Date.now() - startedAt,
+      handledBy: "profile_error",
+    }, { requestId, phone: from });
+    return new Response("server error", { status: 500 });
+  }
 
+  let state;
+  try {
+    state = await getState(profile.user_id);
+  } catch (error) {
+    logError("STATE_LOAD_FAILED", error, { userId: profile.user_id }, {
+      requestId,
+      phone: from,
+      userId: profile.user_id,
+    });
+    logInfo("WEBHOOK_RESPONSE", {
+      status: 500,
+      durationMs: Date.now() - startedAt,
+      handledBy: "state_error",
+    }, { requestId, phone: from, userId: profile.user_id });
+    return new Response("server error", { status: 500 });
+  }
+
+  const logCtx = { requestId, phone: from, userId: profile.user_id };
   const ctx: ConversationContext = {
+    requestId,
+    startedAt,
     userId: profile.user_id,
     phone: from,
     state,
@@ -81,6 +179,11 @@ serve(async (req: Request) => {
 
   const guarded = await handleGlobalGuards(ctx);
   if (guarded) {
+    logInfo("WEBHOOK_RESPONSE", {
+      status: 200,
+      durationMs: Date.now() - startedAt,
+      handledBy: "guard",
+    }, logCtx);
     return new Response("ok", {
       status: 200,
       headers: { "content-type": "text/plain; charset=utf-8" },
@@ -89,12 +192,23 @@ serve(async (req: Request) => {
 
   const routed = await route(ctx);
   if (routed) {
+    logInfo("WEBHOOK_RESPONSE", {
+      status: 200,
+      durationMs: Date.now() - startedAt,
+      handledBy: "router",
+    }, logCtx);
     return new Response("ok", {
       status: 200,
       headers: { "content-type": "text/plain; charset=utf-8" },
     });
   }
 
+  logWarn("WEBHOOK_UNHANDLED", { messageId }, logCtx);
+  logInfo("WEBHOOK_RESPONSE", {
+    status: 200,
+    durationMs: Date.now() - startedAt,
+    handledBy: "default",
+  }, logCtx);
   return new Response("ok", {
     status: 200,
     headers: { "content-type": "text/plain; charset=utf-8" },
diff --git a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/router/guards.ts b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/router/guards.ts
index caba397..6b34418 100644
--- a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/router/guards.ts
+++ b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/router/guards.ts
@@ -3,8 +3,10 @@ import { sendText } from "../wa/client.ts";
 import { clearState } from "../state/store.ts";
 import { sendHome } from "../flows/home.ts";
 import type { ConversationContext } from "../state/types.ts";
+import { logError, logInfo } from "../utils/logger.ts";
+import type { LogContext } from "../utils/logger.ts";
 
-async function markOptOut(phone: string) {
+async function markOptOut(phone: string, logCtx: LogContext) {
   const now = new Date().toISOString();
   const { error } = await sb.from("contacts").upsert({
     msisdn_e164: phone,
@@ -13,11 +15,11 @@ async function markOptOut(phone: string) {
     opt_out_ts: now,
   }, { onConflict: "msisdn_e164" });
   if (error) {
-    console.error("OPT_OUT_UPDATE_FAILED", error);
+    logError("OPT_OUT_UPDATE_FAILED", error, { phone }, logCtx);
   }
 }
 
-async function markOptIn(phone: string) {
+async function markOptIn(phone: string, logCtx: LogContext) {
   const now = new Date().toISOString();
   const { error } = await sb.from("contacts").upsert({
     msisdn_e164: phone,
@@ -26,29 +28,37 @@ async function markOptIn(phone: string) {
     opt_in_ts: now,
   }, { onConflict: "msisdn_e164" });
   if (error) {
-    console.error("OPT_IN_UPDATE_FAILED", error);
+    logError("OPT_IN_UPDATE_FAILED", error, { phone }, logCtx);
   }
 }
 
 export async function handleGlobalGuards(ctx: ConversationContext): Promise<boolean> {
   const text = (ctx.message?.text?.body ?? "").trim().toLowerCase();
   const buttonId = ctx.message?.interactive?.button_reply?.id ?? "";
+  const logCtx: LogContext = {
+    requestId: ctx.requestId,
+    userId: ctx.userId,
+    phone: ctx.phone,
+  };
 
   if (text === "stop" || text === "unsubscribe") {
-    await markOptOut(ctx.phone);
-    await sendText(ctx.phone, "You are now opted out. Reply START anytime to opt back in.");
+    await markOptOut(ctx.phone, logCtx);
+    await sendText(ctx.phone, "You are now opted out. Reply START anytime to opt back in.", logCtx);
+    logInfo("GUARD_OPT_OUT", {}, logCtx);
     return true;
   }
 
   if (text === "start") {
-    await markOptIn(ctx.phone);
-    await sendText(ctx.phone, "You are opted in. Reply HOME for the menu.");
+    await markOptIn(ctx.phone, logCtx);
+    await sendText(ctx.phone, "You are opted in. Reply HOME for the menu.", logCtx);
+    logInfo("GUARD_OPT_IN", {}, logCtx);
     return true;
   }
 
   if (text === "home" || text === "menu" || buttonId === "back_home") {
     await clearState(ctx.userId);
-    await sendHome(ctx.phone);
+    await sendHome(ctx);
+    logInfo("GUARD_HOME", { trigger: buttonId || text }, logCtx);
     return true;
   }
 
diff --git a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/router/router.ts b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/router/router.ts
index 7963f81..a964f95 100644
--- a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/router/router.ts
+++ b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/router/router.ts
@@ -1,5 +1,9 @@
 import { ConversationContext } from "../state/types.ts";
-import { HOME_MENU_IDS, handleHomeSelection, handleShareButton } from "../flows/home.ts";
+import {
+  handleHomeSelection,
+  handleShareButton,
+  HOME_MENU_IDS,
+} from "../flows/home.ts";
 import {
   handleDriverLocation,
   handleDriverSelection,
@@ -53,19 +57,37 @@ import {
 } from "../flows/insurance.ts";
 import { safeButtonTitle } from "../utils/text.ts";
 import { sendButtons } from "../wa/client.ts";
+import { ctxFromConversation, logInfo, logWarn } from "../utils/logger.ts";
 
 async function sendFallback(ctx: ConversationContext) {
-  await sendButtons(ctx.phone, "I didn't catch that. Want to open the home menu?", [
-    { id: "back_home", title: safeButtonTitle("Back to Menu") },
-  ]);
+  await sendButtons(
+    ctx.phone,
+    "I didn't catch that. Want to open the home menu?",
+    [
+      { id: "back_home", title: safeButtonTitle("Back to Menu") },
+    ],
+    ctxFromConversation(ctx),
+  );
 }
 
 export async function route(ctx: ConversationContext): Promise<boolean> {
   const { message } = ctx;
+  const logCtx = {
+    requestId: ctx.requestId,
+    userId: ctx.userId,
+    phone: ctx.phone,
+  };
+  const logRoute = (flow: string, extra: Record<string, unknown> = {}) => {
+    logInfo("ROUTE", { flow, ...extra }, logCtx);
+  };
 
   // 1) Insurance media first
-  if ((message?.type === "image" && message.image) || (message?.type === "document" && message.document)) {
+  if (
+    (message?.type === "image" && message.image) ||
+    (message?.type === "document" && message.document)
+  ) {
     if (ctx.state.key === "ins_wait_doc") {
+      logRoute("insurance_media", { messageType: message.type });
       await handleInsuranceMedia(ctx, message);
       return true;
     }
@@ -77,135 +99,169 @@ export async function route(ctx: ConversationContext): Promise<boolean> {
   if (interactive?.type === "list_reply") {
     const id = interactive.list_reply?.id ?? "";
     if (!id) {
+      logWarn("ROUTE_FALLBACK", { reason: "empty_list_id" }, logCtx);
       await sendFallback(ctx);
       return true;
     }
 
-    if (HOME_MENU_IDS.includes(id)) {
-      await handleHomeSelection(ctx.phone, id);
-      return true;
-    }
     if (id === "motor_insurance") {
+      logRoute("insurance_start", {});
       await startInsurance(ctx);
       return true;
     }
     if (id === "marketplace") {
+      logRoute("marketplace_start", {});
       await startMarketplace(ctx);
       return true;
     }
     if (id === "momoqr_start") {
+      logRoute("momo_qr_start", {});
       await startMomoQr(ctx);
       return true;
     }
     if (id === "baskets") {
+      logRoute("baskets_start", {});
       await startBaskets(ctx);
       return true;
     }
     if (id === "see_drivers") {
+      logRoute("nearby_drivers_start", {});
       await startNearbyDrivers(ctx);
       return true;
     }
     if (id === "see_passengers") {
+      logRoute("nearby_passengers_start", {});
       await startNearbyPassengers(ctx);
       return true;
     }
     if (id === "schedule_trip") {
+      logRoute("schedule_start", {});
       await startSchedule(ctx);
       return true;
     }
     if (id.startsWith("cat_")) {
+      logRoute("marketplace_create_category", { selection: id });
       await handleCreateCategory(ctx, id);
       return true;
     }
     if (id.startsWith("see_cat_")) {
+      logRoute("marketplace_discover_category", { selection: id });
       await handleDiscoverCategory(ctx, id);
       return true;
     }
     if (id.startsWith("near_v_drv_")) {
+      logRoute("nearby_drivers_vehicle", { selection: id });
       await handleDriverVehicleChoice(ctx, id);
       return true;
     }
     if (id.startsWith("near_v_pax_")) {
+      logRoute("nearby_passengers_vehicle", { selection: id });
       await handlePassengerVehicleChoice(ctx, id);
       return true;
     }
     if (id.startsWith("veh_")) {
+      logRoute("schedule_vehicle", { selection: id });
       await handleVehicleChoice(ctx, id);
       return true;
     }
     if (id.startsWith("biz_")) {
+      logRoute("marketplace_list_action", { selection: id });
       await handleBusinessAction(ctx, id);
       return true;
     }
     if (id.startsWith("drv_")) {
+      logRoute("nearby_driver_select", { selection: id });
       await handleDriverSelection(ctx, id);
       return true;
     }
     if (id.startsWith("pax_")) {
+      logRoute("nearby_passenger_select", { selection: id });
       await handlePassengerSelection(ctx, id);
       return true;
     }
     if (id.startsWith("mtch_")) {
+      logRoute("schedule_match_select", { selection: id });
       await handleMatchSelection(ctx, id);
       return true;
     }
     if (id.startsWith("mqr_")) {
+      logRoute("momo_qr_list", { selection: id });
       await handleMomoQrList(ctx, id);
       return true;
     }
     if (id.startsWith("b_") || id === "bk_new" || id === "bk_join_code") {
+      logRoute("baskets_list", { selection: id });
       await handleBasketListSelection(ctx, id);
       return true;
     }
-    if (ctx.state.key === "await_schedule_role" && (id === "role_passenger" || id === "role_driver")) {
+    if (
+      ctx.state.key === "await_schedule_role" &&
+      (id === "role_passenger" || id === "role_driver")
+    ) {
+      logRoute("schedule_role", { selection: id });
       await handleRoleChoice(ctx, id);
       return true;
     }
+    if (HOME_MENU_IDS.includes(id)) {
+      logRoute("home_menu", { selection: id });
+      await handleHomeSelection(ctx, id);
+      return true;
+    }
   }
 
   // 3) Button replies
   if (interactive?.type === "button_reply") {
     const id = interactive.button_reply?.id ?? "";
     if (!id) {
+      logWarn("ROUTE_FALLBACK", { reason: "empty_button_id" }, logCtx);
       await sendFallback(ctx);
       return true;
     }
 
     if (id === "share_link" || id === "share_qr") {
-      await handleShareButton(ctx.phone, id);
+      logRoute("home_share", { selection: id });
+      await handleShareButton(ctx, id);
       return true;
     }
     if (id === "mk_add" || id === "mk_see") {
+      logRoute("marketplace_option", { selection: id });
       await handleMarketplaceOption(ctx, id);
       return true;
     }
     if (id.startsWith("mqr_")) {
+      logRoute("momo_qr_button", { selection: id });
       await handleMomoQrButton(ctx, id);
       return true;
     }
     if (id === "bk_type_public" || id === "bk_type_private") {
+      logRoute("baskets_type", { selection: id });
       await handleBasketTypeButton(ctx, id);
       return true;
     }
     if (id.startsWith("bk_")) {
+      logRoute("baskets_action", { selection: id });
       await handleBasketButton(ctx, id);
       return true;
     }
     if (id.startsWith("sched_add_drop_")) {
       const tripId = id.replace("sched_add_drop_", "");
+      logRoute("schedule_add_drop", { tripId });
       await handleAddDropButton(ctx, tripId);
       return true;
     }
     if (id.startsWith("sched_skip_drop_")) {
       const tripId = id.replace("sched_skip_drop_", "");
+      logRoute("schedule_skip_drop", { tripId });
       await handleSkipDrop(ctx, tripId);
       return true;
     }
     if (id === "biz_catalog_skip") {
+      logRoute("marketplace_catalog_skip", {});
       await handleCatalogSkip(ctx);
       return true;
     }
     if (id.startsWith("biz_contact_") || id.startsWith("biz_catalog_")) {
+      logRoute("marketplace_action_button", { selection: id });
       await handleBusinessAction(ctx, id);
       return true;
     }
@@ -216,26 +272,32 @@ export async function route(ctx: ConversationContext): Promise<boolean> {
     const { latitude, longitude } = message.location;
     if (typeof latitude === "number" && typeof longitude === "number") {
       if (ctx.state.key === "near_await_loc_drivers") {
+        logRoute("nearby_drivers_location", {});
         await handleDriverLocation(ctx, latitude, longitude);
         return true;
       }
       if (ctx.state.key === "near_await_loc_passengers") {
+        logRoute("nearby_passengers_location", {});
         await handlePassengerLocation(ctx, latitude, longitude);
         return true;
       }
       if (ctx.state.key === "await_schedule_pickup") {
+        logRoute("schedule_pickup_location", {});
         await handlePickupLocation(ctx, latitude, longitude);
         return true;
       }
       if (ctx.state.key === "sched_await_drop") {
+        logRoute("schedule_drop_location", {});
         await handleDropLocation(ctx, latitude, longitude);
         return true;
       }
       if (ctx.state.key === "await_business_location") {
+        logRoute("marketplace_business_location", {});
         await handleBusinessLocation(ctx, latitude, longitude);
         return true;
       }
       if (ctx.state.key === "await_market_see_loc") {
+        logRoute("marketplace_discover_location", {});
         await handleDiscoverLocation(ctx, latitude, longitude);
         return true;
       }
@@ -247,22 +309,28 @@ export async function route(ctx: ConversationContext): Promise<boolean> {
     const text = (message.text?.body ?? "").trim();
     if (text) {
       if (await handleBasketText(ctx, text)) {
+        logRoute("baskets_text", { state: ctx.state.key });
         return true;
       }
       if (await handleMomoQrText(ctx, text)) {
+        logRoute("momo_qr_text", { state: ctx.state.key });
         return true;
       }
       if (await handleInsuranceText(ctx, text)) {
+        logRoute("insurance_text", { state: ctx.state.key });
         return true;
       }
       switch (ctx.state.key) {
         case "await_business_name":
+          logRoute("marketplace_business_name", {});
           await handleBusinessName(ctx, text);
           return true;
         case "await_business_desc":
+          logRoute("marketplace_business_desc", {});
           await handleBusinessDesc(ctx, text);
           return true;
         case "await_business_catalog":
+          logRoute("marketplace_business_catalog", {});
           await handleBusinessCatalog(ctx, text);
           return true;
         default:
@@ -272,6 +340,7 @@ export async function route(ctx: ConversationContext): Promise<boolean> {
   }
 
   // 6) Fallback if nothing handled
+  logWarn("ROUTE_FALLBACK", { state: ctx.state.key }, logCtx);
   await sendFallback(ctx);
   return true;
 }
diff --git a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/rpc/marketplace.ts b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/rpc/marketplace.ts
index 29999e1..a93af5b 100644
--- a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/rpc/marketplace.ts
+++ b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/rpc/marketplace.ts
@@ -1,4 +1,6 @@
 import { sb } from "../config.ts";
+import { logError } from "../utils/logger.ts";
+import type { LogContext } from "../utils/logger.ts";
 
 export interface CategoryRow {
   id: number;
@@ -18,7 +20,7 @@ export interface BusinessRow {
   is_active?: boolean;
 }
 
-export async function fetchMarketplaceCategories(): Promise<CategoryRow[]> {
+export async function fetchMarketplaceCategories(logCtx?: LogContext): Promise<CategoryRow[]> {
   try {
     const { data, error } = await sb
       .from("marketplace_categories")
@@ -28,12 +30,12 @@ export async function fetchMarketplaceCategories(): Promise<CategoryRow[]> {
     if (error) throw error;
     return Array.isArray(data) ? data as CategoryRow[] : [];
   } catch (err) {
-    console.error("fetchMarketplaceCategories failed", err);
+    logError("MARKETPLACE_CATEGORIES_FAILED", err, {}, logCtx);
     return [];
   }
 }
 
-export async function fetchBusinessById(id: string): Promise<BusinessRow | null> {
+export async function fetchBusinessById(id: string, logCtx?: LogContext): Promise<BusinessRow | null> {
   try {
     const { data, error } = await sb
       .from("businesses")
@@ -43,7 +45,7 @@ export async function fetchBusinessById(id: string): Promise<BusinessRow | null>
     if (error) throw error;
     return (data as BusinessRow) ?? null;
   } catch (err) {
-    console.error("fetchBusinessById failed", err);
+    logError("MARKETPLACE_BUSINESS_FETCH_FAILED", err, { id }, logCtx);
     return null;
   }
 }
@@ -55,7 +57,7 @@ export async function insertBusiness(payload: {
   description?: string | null;
   catalog_url?: string | null;
   geo?: string | null;
-}) {
+}, logCtx?: LogContext) {
   try {
     const { data, error } = await sb
       .from("businesses")
@@ -65,7 +67,7 @@ export async function insertBusiness(payload: {
     if (error) throw error;
     return data?.id as string;
   } catch (err) {
-    console.error("insertBusiness failed", err);
+    logError("MARKETPLACE_INSERT_FAILED", err, { owner: payload.owner_whatsapp }, logCtx);
     return null;
   }
 }
@@ -75,6 +77,7 @@ export async function rpcNearbyBusinesses(
   lon: number,
   viewer: string,
   limit = 10,
+  logCtx?: LogContext,
 ): Promise<BusinessRow[]> {
   try {
     const { data, error } = await sb.rpc("nearby_businesses", {
@@ -86,7 +89,10 @@ export async function rpcNearbyBusinesses(
     if (error) throw error;
     return Array.isArray(data) ? data as BusinessRow[] : [];
   } catch (err) {
-    console.error("nearby_businesses failed", err);
+    logError("RPC_NEARBY_BUSINESSES_FAILED", err, {
+      viewer,
+      limit,
+    }, logCtx);
     return [];
   }
 }
diff --git a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/rpc/match.ts b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/rpc/match.ts
index 9196522..70ac757 100644
--- a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/rpc/match.ts
+++ b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/rpc/match.ts
@@ -1,4 +1,6 @@
 import { sb } from "../config.ts";
+import { logError, logInfo } from "../utils/logger.ts";
+import type { LogContext } from "../utils/logger.ts";
 
 export interface TripMatchRow {
   user_id?: string;
@@ -8,30 +10,48 @@ export interface TripMatchRow {
   name?: string;
 }
 
-export async function rpcMatchDriversForTrip(tripId: string, limit = 10): Promise<TripMatchRow[]> {
+export async function rpcMatchDriversForTrip(tripId: string, limit = 10, logCtx?: LogContext): Promise<TripMatchRow[]> {
   try {
     const { data, error } = await sb.rpc("match_drivers_for_trip", {
       _trip_id: tripId,
       _limit: limit,
     });
     if (error) throw error;
-    return Array.isArray(data) ? data as TripMatchRow[] : [];
+    const rows = Array.isArray(data) ? data as TripMatchRow[] : [];
+    logInfo("RPC_MATCH_DRIVERS_OK", {
+      tripId,
+      count: rows.length,
+      limit,
+    }, logCtx);
+    return rows;
   } catch (err) {
-    console.error("match_drivers_for_trip failed", err);
+    logError("RPC_MATCH_DRIVERS_FAILED", err, {
+      tripId,
+      limit,
+    }, logCtx);
     return [];
   }
 }
 
-export async function rpcMatchPassengersForTrip(tripId: string, limit = 10): Promise<TripMatchRow[]> {
+export async function rpcMatchPassengersForTrip(tripId: string, limit = 10, logCtx?: LogContext): Promise<TripMatchRow[]> {
   try {
     const { data, error } = await sb.rpc("match_passengers_for_trip", {
       _trip_id: tripId,
       _limit: limit,
     });
     if (error) throw error;
-    return Array.isArray(data) ? data as TripMatchRow[] : [];
+    const rows = Array.isArray(data) ? data as TripMatchRow[] : [];
+    logInfo("RPC_MATCH_PASSENGERS_OK", {
+      tripId,
+      count: rows.length,
+      limit,
+    }, logCtx);
+    return rows;
   } catch (err) {
-    console.error("match_passengers_for_trip failed", err);
+    logError("RPC_MATCH_PASSENGERS_FAILED", err, {
+      tripId,
+      limit,
+    }, logCtx);
     return [];
   }
 }
diff --git a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/rpc/nearby.ts b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/rpc/nearby.ts
index 97403fa..0f7bd19 100644
--- a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/rpc/nearby.ts
+++ b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/rpc/nearby.ts
@@ -1,4 +1,6 @@
 import { sb } from "../config.ts";
+import { logError, logInfo } from "../utils/logger.ts";
+import type { LogContext } from "../utils/logger.ts";
 
 export interface NearbyDriverRow {
   driver_user_id?: string;
@@ -24,6 +26,7 @@ export async function rpcNearbyDriversByVehicle(
   viewer: string,
   vehicle: string,
   limit = 10,
+  logCtx?: LogContext,
 ): Promise<NearbyDriverRow[]> {
   try {
     const { data, error } = await sb.rpc("nearby_drivers_by_vehicle", {
@@ -34,13 +37,24 @@ export async function rpcNearbyDriversByVehicle(
       _limit: limit,
     });
     if (error) throw error;
-    return Array.isArray(data) ? data as NearbyDriverRow[] : [];
+    const rows = Array.isArray(data) ? data as NearbyDriverRow[] : [];
+    logInfo("RPC_NEARBY_DRIVERS_OK", {
+      viewer,
+      vehicle,
+      count: rows.length,
+      limit,
+    }, logCtx);
+    return rows;
   } catch (err) {
     const message = (err as { message?: string } | null | undefined)?.message ?? "";
     if (message.includes("does not exist")) {
-      console.error("MISSING_RPC: nearby_drivers_by_vehicle");
+      logError("RPC_NEARBY_DRIVERS_MISSING", err, {}, logCtx);
     } else {
-      console.error("nearby_drivers_by_vehicle failed", err);
+      logError("RPC_NEARBY_DRIVERS_FAILED", err, {
+        viewer,
+        vehicle,
+        limit,
+      }, logCtx);
     }
     return [];
   }
@@ -52,6 +66,7 @@ export async function rpcNearbyPassengersByVehicle(
   viewer: string,
   vehicle: string,
   limit = 10,
+  logCtx?: LogContext,
 ): Promise<NearbyPassengerRow[]> {
   try {
     const { data, error } = await sb.rpc("nearby_passengers_by_vehicle", {
@@ -62,19 +77,30 @@ export async function rpcNearbyPassengersByVehicle(
       _limit: limit,
     });
     if (error) throw error;
-    return Array.isArray(data) ? data as NearbyPassengerRow[] : [];
+    const rows = Array.isArray(data) ? data as NearbyPassengerRow[] : [];
+    logInfo("RPC_NEARBY_PASSENGERS_OK", {
+      viewer,
+      vehicle,
+      count: rows.length,
+      limit,
+    }, logCtx);
+    return rows;
   } catch (err) {
     const message = (err as { message?: string } | null | undefined)?.message ?? "";
     if (message.includes("does not exist")) {
-      console.error("MISSING_RPC: nearby_passengers_by_vehicle");
+      logError("RPC_NEARBY_PASSENGERS_MISSING", err, {}, logCtx);
     } else {
-      console.error("nearby_passengers_by_vehicle failed", err);
+      logError("RPC_NEARBY_PASSENGERS_FAILED", err, {
+        viewer,
+        vehicle,
+        limit,
+      }, logCtx);
     }
     return [];
   }
 }
 
-export async function markServedDriver(viewerMsisdn: string, driverUserId?: string | null) {
+export async function markServedDriver(viewerMsisdn: string, driverUserId?: string | null, logCtx?: LogContext) {
   if (!driverUserId) return;
   try {
     const expiresAt = new Date(Date.now() + 15 * 60 * 1000).toISOString();
@@ -85,11 +111,14 @@ export async function markServedDriver(viewerMsisdn: string, driverUserId?: stri
       created_at: new Date().toISOString(),
     });
   } catch (err) {
-    console.error("markServedDriver failed", err);
+    logError("SERVED_DRIVER_MARK_FAILED", err, {
+      viewer: viewerMsisdn,
+      driverUserId,
+    }, logCtx);
   }
 }
 
-export async function markServedPassenger(viewerMsisdn: string, tripId?: string | null) {
+export async function markServedPassenger(viewerMsisdn: string, tripId?: string | null, logCtx?: LogContext) {
   if (!tripId) return;
   try {
     const expiresAt = new Date(Date.now() + 15 * 60 * 1000).toISOString();
@@ -100,6 +129,9 @@ export async function markServedPassenger(viewerMsisdn: string, tripId?: string
       created_at: new Date().toISOString(),
     });
   } catch (err) {
-    console.error("markServedPassenger failed", err);
+    logError("SERVED_PASSENGER_MARK_FAILED", err, {
+      viewer: viewerMsisdn,
+      tripId,
+    }, logCtx);
   }
 }
diff --git a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/state/idempotency.ts b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/state/idempotency.ts
index 87e258f..0cc7c19 100644
--- a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/state/idempotency.ts
+++ b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/state/idempotency.ts
@@ -1,11 +1,20 @@
-export async function idempotent(client: any, waMessageId: string | null | undefined): Promise<boolean> {
+import type { LogContext } from "../utils/logger.ts";
+import { logError } from "../utils/logger.ts";
+
+export async function idempotent(
+  client: any,
+  waMessageId: string | null | undefined,
+  logCtx?: LogContext,
+): Promise<boolean> {
   if (!waMessageId) return true;
-  const { error } = await client.from('wa_events').insert({ wa_message_id: waMessageId });
-  if ((error as { code?: string } | null | undefined)?.code === '23505') {
+  const { error } = await client.from("wa_events").insert({
+    wa_message_id: waMessageId,
+  });
+  if ((error as { code?: string } | null | undefined)?.code === "23505") {
     return false;
   }
   if (error) {
-    console.error('IDEMPOTENCY_ERROR', error);
+    logError("IDEMPOTENCY_ERROR", error, { waMessageId }, logCtx);
     return false;
   }
   return true;
diff --git a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/state/types.ts b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/state/types.ts
index b977a5b..8b4c542 100644
--- a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/state/types.ts
+++ b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/state/types.ts
@@ -4,6 +4,8 @@ export interface ChatState<T = unknown> {
 }
 
 export interface ConversationContext {
+  requestId: string;
+  startedAt: number;
   userId: string;
   phone: string;
   state: ChatState;
diff --git a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/utils/share.ts b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/utils/share.ts
index 53a1806..dc629f2 100644
--- a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/utils/share.ts
+++ b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/utils/share.ts
@@ -1,5 +1,6 @@
 import { sb } from "../config.ts";
 import { e164 } from "./phone.ts";
+import { logError } from "./logger.ts";
 
 let cachedDigits: string | null = null;
 
@@ -15,7 +16,7 @@ async function fetchBotDigits(): Promise<string> {
     const value = data?.WA_BOT_NUMBER_E164 ?? "";
     cachedDigits = value ? e164(value).replace(/\D/g, "") : "";
   } catch (error) {
-    console.error("FETCH_BOT_DIGITS_FAILED", error);
+    logError("FETCH_BOT_DIGITS_FAILED", error);
     cachedDigits = "";
   }
   return cachedDigits;
diff --git a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/wa/client.ts b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/wa/client.ts
index 3ea40ad..9613395 100644
--- a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/wa/client.ts
+++ b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/wa/client.ts
@@ -1,8 +1,10 @@
 import { WA_PHONE_ID, WA_TOKEN } from "../config.ts";
+import { logError } from "../utils/logger.ts";
+import type { LogContext } from "../utils/logger.ts";
 
 const WA_BASE = `https://graph.facebook.com/v20.0/${WA_PHONE_ID}`;
 
-async function waSend(path: string, payload: unknown) {
+async function waSend(path: string, payload: unknown, logCtx?: LogContext) {
   const response = await fetch(`${WA_BASE}/${path}`, {
     method: "POST",
     headers: {
@@ -14,6 +16,11 @@ async function waSend(path: string, payload: unknown) {
 
   if (!response.ok) {
     const text = await response.text();
+    logError("WHATSAPP_SEND_FAILED", new Error(`WhatsApp send failed: ${response.status}`), {
+      path,
+      status: response.status,
+      response: text,
+    }, logCtx);
     throw new Error(`WhatsApp send failed: ${response.status} ${text}`);
   }
 
@@ -30,16 +37,16 @@ type ListOptions = {
   rows: ListRow[];
 };
 
-async function sendText(to: string, body: string) {
+async function sendText(to: string, body: string, logCtx?: LogContext) {
   return waSend("messages", {
     messaging_product: "whatsapp",
     to,
     type: "text",
     text: { body },
-  });
+  }, logCtx);
 }
 
-async function sendButtons(to: string, body: string, buttons: Button[]) {
+async function sendButtons(to: string, body: string, buttons: Button[], logCtx?: LogContext) {
   return waSend("messages", {
     messaging_product: "whatsapp",
     to,
@@ -57,10 +64,10 @@ async function sendButtons(to: string, body: string, buttons: Button[]) {
         })),
       },
     },
-  });
+  }, logCtx);
 }
 
-async function sendList(to: string, options: ListOptions) {
+async function sendList(to: string, options: ListOptions, logCtx?: LogContext) {
   return waSend("messages", {
     messaging_product: "whatsapp",
     to,
@@ -88,10 +95,10 @@ async function sendList(to: string, options: ListOptions) {
         ],
       },
     },
-  });
+  }, logCtx);
 }
 
-async function sendImageUrl(to: string, link: string, caption?: string) {
+async function sendImageUrl(to: string, link: string, caption?: string, logCtx?: LogContext) {
   return waSend("messages", {
     messaging_product: "whatsapp",
     to,
@@ -100,7 +107,7 @@ async function sendImageUrl(to: string, link: string, caption?: string) {
       link,
       caption,
     },
-  });
+  }, logCtx);
 }
 
 export { sendButtons, sendImageUrl, sendList, sendText, waSend };
diff --git a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/wa/verify.ts b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/wa/verify.ts
index b2bba13..24b5839 100644
--- a/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/wa/verify.ts
+++ b/Documents/Projects/easymo-backend/supabase/functions/wa-webhook/wa/verify.ts
@@ -1,14 +1,20 @@
 import { crypto } from "https://deno.land/std@0.177.0/crypto/mod.ts";
 import { WA_APP_SECRET } from "../config.ts";
+import { logError } from "../utils/logger.ts";
+import type { LogContext } from "../utils/logger.ts";
 
-export async function verifySignature(req: Request, rawBody: string): Promise<boolean> {
+export async function verifySignature(
+  req: Request,
+  rawBody: string,
+  logCtx?: LogContext,
+): Promise<boolean> {
   try {
     const sig = req.headers.get("x-hub-signature-256") || "";
     if (!sig || !WA_APP_SECRET) return true;
     const expected = await signHmacSha256Hex(WA_APP_SECRET, rawBody);
     return sig.toLowerCase() === `sha256=${expected}`;
   } catch (error) {
-    console.error("SIG_VERIFY_ERROR", error);
+    logError("SIG_VERIFY_ERROR", error, {}, logCtx);
     return false;
   }
 }
@@ -23,5 +29,7 @@ async function signHmacSha256Hex(key: string, data: string): Promise<string> {
     ["sign"],
   );
   const mac = await crypto.subtle.sign("HMAC", cryptoKey, encoder.encode(data));
-  return Array.from(new Uint8Array(mac)).map((b) => b.toString(16).padStart(2, "0")).join("");
+  return Array.from(new Uint8Array(mac)).map((b) =>
+    b.toString(16).padStart(2, "0")
+  ).join("");
 }
diff --git a/package.json b/package.json
index dac8e48..ec075b1 100644
--- a/package.json
+++ b/package.json
@@ -16,7 +16,10 @@
     "easy-momo:build:dev": "cd apps/easy-momo && npm run build:dev",
     "easy-momo:lint": "cd apps/easy-momo && npm run lint",
     "easy-momo:format": "cd apps/easy-momo && npm run format",
-    "easy-momo:preview": "cd apps/easy-momo && npm run preview"
+    "easy-momo:preview": "cd apps/easy-momo && npm run preview",
+    "admin-app:dev": "cd apps/admin-app && npm run dev",
+    "admin-app:build": "cd apps/admin-app && npm run build",
+    "admin-app:preview": "cd apps/admin-app && npm run preview"
   },
   "dependencies": {
     "@tanstack/react-query": "^4.40.1",
@@ -52,4 +55,4 @@
     "vite": "^5.4.19",
     "vitest": "^3.2.4"
   }
-}
+}
\ No newline at end of file
