name: Monorepo CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    name: Root lint/test/build (+coverage/security/audit)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Lint (root)
        run: npm run lint

      - name: Unit tests with coverage (Vitest)
        env:
          TARGET_STATEMENTS: 45
          TARGET_BRANCHES: 40
          TARGET_FUNCTIONS: 45
          TARGET_LINES: 45
        run: npm run coverage

      - name: Build (root)
        run: npm run build

      # Secret scanning (gitleaks)
      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2

      # Dependency + config risk checks (your script wraps audit/depcheck)
      - name: Risk audit (npm audit + depcheck)
        run: npm run risk:audit || true

      # SBOM
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: .

  next-web:
    name: Next.js + Prisma
    runs-on: ubuntu-latest
    needs: build-test
    env:
      DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/postgres
      DIRECT_URL: postgresql://postgres:postgres@127.0.0.1:5432/postgres
      SKIP_HEALTHCHECK_DB: 'true'
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: apps/web/package-lock.json

      - name: Install dependencies (Next.js app)
        run: npm ci
        working-directory: apps/web

      - name: Prisma validate
        run: npx prisma validate
        working-directory: apps/web

      - name: Prisma generate
        run: npm run prisma:generate
        working-directory: apps/web

      - name: Prisma migration diff (dry-run)
        run: npx prisma migrate diff --from-empty --to-schema-datamodel ./prisma/schema.prisma --script
        working-directory: apps/web

      - name: Lint (Next.js)
        run: npm run lint
        working-directory: apps/web

      - name: Build (Next.js)
        run: npm run build
        working-directory: apps/web

  ui-smoke:
    name: UI smoke (Playwright)
    runs-on: ubuntu-latest
    needs: [build-test, next-web]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Smoke tests (Playwright)
        env:
          PLAYWRIGHT_BASE_URL: ${{ secrets.PLAYWRIGHT_BASE_URL }}
          PLAYWRIGHT_SMOKE_PATHS: ${{ secrets.PLAYWRIGHT_SMOKE_PATHS }}
        run: |
          if [ -z "$PLAYWRIGHT_BASE_URL" ]; then
            echo 'PLAYWRIGHT_BASE_URL secret is required for UI smoke tests.' >&2
            exit 1
          fi
          npm run test:playwright

  python-ci:
    name: Python lint/test/security
    if: ${{ hashFiles('requirements.txt') != '' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest bandit
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint (flake8)
        run: flake8 .

      - name: Test (pytest)
        run: pytest

      - name: Bandit SAST
        run: bandit -r .

      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: .

  container-build:
    name: Build container (no push)
    runs-on: ubuntu-latest
    needs: [build-test]
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: my-app:latest
