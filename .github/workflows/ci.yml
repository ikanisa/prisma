name: Monorepo CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '30 2 * * *'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    name: Root lint/test/build (+coverage/policy/audit)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v5

      - uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - uses: actions/setup-node@v6
        with:
          node-version: 20.19.4
          cache: 'pnpm'

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Validate system config
        run: pnpm run config:validate

      - name: Typecheck
        run: pnpm run typecheck

      - name: Lint (root)
        run: pnpm run lint

      - name: Unit tests with coverage (Vitest)
        env:
          TARGET_STATEMENTS: 85
          TARGET_BRANCHES: 80
          TARGET_FUNCTIONS: 85
          TARGET_LINES: 85
        run: |
          pnpm run config:validate
          pnpm run coverage

      - name: Build web bundle
        run: pnpm run build

      - name: Enforce bundle budgets
        env:
          BUNDLE_MAX_MAIN_GZ_KB: 300
          BUNDLE_MAX_CHUNK_GZ_KB: 250
        run: pnpm run check:bundle

      - name: Policy tests (pgTAP)
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        run: |
          if [ ! -f scripts/test_policies.sql ]; then
            echo 'scripts/test_policies.sql not found; skipping policy tests.'
            exit 0
          fi
          if [ -z "$DATABASE_URL" ]; then
            echo 'STAGING_DATABASE_URL secret is required for policy tests.' >&2
            exit 1
          fi
          psql "$DATABASE_URL" -f scripts/test_policies.sql

      - name: Verify retention policy documentation
        run: pnpm run policy:verify

      - name: Audit dependencies
        run: pnpm audit --prod || true

  migration-smoke:
    name: Database migration smoke
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v5

      - name: Wait for Postgres
        run: |
          for i in {1..20}; do
            if pg_isready -h 127.0.0.1 -p 5432 -U postgres; then
              exit 0
            fi
            sleep 3
          done
          echo "Postgres did not become ready" >&2
          exit 1

      - name: Apply Supabase migrations
        env:
          DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/postgres
        run: |
          set -euo pipefail
          for file in $(ls -1 supabase/migrations/*.sql | sort); do
            echo "Applying $file"
            psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -f "$file"
          done

      - name: Apply consolidated SQL migrations
        env:
          DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/postgres
        run: |
          set -euo pipefail
          for file in $(ls -1 migrations/sql/*.sql | sort); do
            echo "Applying $file"
            psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -f "$file"
          done

      - name: Verify core tables
        env:
          DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/postgres
        run: |
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 <<'SQL'
          SELECT 'analytics_events' AS table, to_regclass('public.analytics_events');
          SELECT 'telemetry_service_levels' AS table, to_regclass('public.telemetry_service_levels');
          SELECT 'openai_debug_events' AS table, to_regclass('public.openai_debug_events');
          SQL

  openapi-client:
    name: OpenAPI codegen + client build
    runs-on: ubuntu-latest
    needs: [build-test, migration-smoke]
    steps:
      - uses: actions/checkout@v5

      - uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - uses: actions/setup-node@v6
        with:
          node-version: 20.19.4
          cache: 'pnpm'

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install root deps
        run: pnpm install --frozen-lockfile

      - name: Install backend deps for OpenAPI export
        run: |
          python -m pip install --upgrade pip
          if [ -f server/requirements.offline.txt ]; then
            python -m pip install -r server/requirements.offline.txt
          else
            python -m pip install -r server/requirements.txt
          fi

      - name: Export OpenAPI + generate types
        run: pnpm run codegen:api

      - name: Build API client
        run: |
          pnpm --filter @prisma-glow/api-client run build || true

      - name: Enforce OpenAPI/types drift-free
        run: |
          git add -N packages/api-client/types.ts openapi/fastapi.json || true
          git diff --exit-code -- packages/api-client/types.ts openapi/fastapi.json || (echo 'OpenAPI or types drift detected' && exit 1)

  next-web:
    name: Next.js + Prisma
    runs-on: ubuntu-latest
    needs: [build-test, migration-smoke]
    env:
      DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/postgres
      DIRECT_URL: postgresql://postgres:postgres@127.0.0.1:5432/postgres
      SKIP_HEALTHCHECK_DB: 'true'
    steps:
      - uses: actions/checkout@v5

      - uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - uses: actions/setup-node@v6
        with:
          node-version: 20.19.4
          cache: 'pnpm'

      - name: Install dependencies (Next.js app)
        run: pnpm install --frozen-lockfile

      - name: Prisma validate
        run: pnpm --filter web exec prisma validate

      - name: Prisma generate
        run: pnpm --filter web run prisma:generate

      - name: Prisma migration diff (dry-run)
        run: pnpm --filter web exec prisma migrate diff --from-empty --to-schema-datamodel ./prisma/schema.prisma --script

      - name: Lint (Next.js)
        run: pnpm --filter web run lint

      - name: Build (Next.js)
        run: pnpm --filter web run build

  ui-smoke:
    name: UI smoke (Playwright)
    runs-on: ubuntu-latest
    needs: [build-test, next-web]
    steps:
      - uses: actions/checkout@v5

      - uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - uses: actions/setup-node@v6
        with:
          node-version: 20.19.4
          cache: 'pnpm'

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Smoke tests (Playwright)
        env:
          PLAYWRIGHT_BASE_URL: ${{ secrets.PLAYWRIGHT_BASE_URL }}
          PLAYWRIGHT_SMOKE_PATHS: ${{ secrets.PLAYWRIGHT_SMOKE_PATHS }}
        run: |
          if [ -z "$PLAYWRIGHT_BASE_URL" ]; then
            echo 'PLAYWRIGHT_BASE_URL secret is required for UI smoke tests.' >&2
            exit 1
          fi
          pnpm run test:playwright

  agent-manifests:
    name: Agent manifests publish
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v5

      - uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - uses: actions/setup-node@v6
        with:
          node-version: 20.19.4
          cache: 'pnpm'

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Dry-run manifest publish
        if: github.event_name == 'pull_request'
        run: pnpm run agents:publish:dry

      - name: Publish manifests to staging
        if: github.event_name != 'pull_request'
        env:
          OPENAI_API_KEY: ${{ secrets.STAGING_OPENAI_API_KEY }}
          OPENAI_ORG_ID: ${{ secrets.STAGING_OPENAI_ORG_ID }}
          SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY }}
        run: pnpm run agents:publish:staging

  agent-evaluations:
    name: Agent evaluations
    runs-on: ubuntu-latest
    needs: build-test
    if: github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v5

      - uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - uses: actions/setup-node@v6
        with:
          node-version: 20.19.4
          cache: 'pnpm'

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Run agent evaluations
        env:
          AGENT_EVALUATION_BASE_URL: ${{ secrets.AGENT_EVALUATION_BASE_URL }}
          AGENT_EVALUATION_BEARER_TOKEN: ${{ secrets.AGENT_EVALUATION_BEARER_TOKEN }}
        run: pnpm run agents:evaluate

      - name: Upload evaluation artifacts
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: agent-evaluations-report
          path: |
            dist/agent_evaluations_report.json
            dist/agent_evaluations_metrics.ndjson

  fastapi-smoke:
    name: FastAPI health smoke
    runs-on: ubuntu-latest
    needs: build-test
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
    env:
      SUPABASE_URL: http://localhost:9999
      SUPABASE_SERVICE_ROLE_KEY: local-service-role-key
      SUPABASE_JWT_SECRET: local-jwt-secret
      DATABASE_URL: postgresql+psycopg://postgres:postgres@localhost:5432/postgres
      REDIS_URL: redis://localhost:6379/0
      OTEL_SERVICE_NAME: backend-api
      ENVIRONMENT: test
      SERVICE_VERSION: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r server/requirements.txt

      - name: Start FastAPI (uvicorn)
        run: |
          python -m uvicorn server.health_app:app --host 127.0.0.1 --port 8000 &
          echo $! > api.pid
          for i in {1..30}; do
            curl -fsS http://127.0.0.1:8000/health && break
            sleep 1
          done

      - name: Check /health and /readiness
        run: |
          curl -fsS http://127.0.0.1:8000/health | jq .
          curl -fsS http://127.0.0.1:8000/readiness | jq .

      - name: Stop FastAPI
        if: always()
        run: |
          if [ -f api.pid ]; then kill $(cat api.pid) || true; fi
