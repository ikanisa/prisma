name: "Container Image Scanning"

on:
  push:
    branches: [ main ]
    paths:
      - '**/Dockerfile'
      - '.github/workflows/container-scan.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '**/Dockerfile'
      - '.github/workflows/container-scan.yml'
  workflow_dispatch:
  schedule:
    # Run weekly on Mondays at 05:00 UTC
    - cron: '0 5 * * 1'

concurrency:
  group: container-scan-${{ github.ref }}
  cancel-in-progress: true

jobs:
  discover-dockerfiles:
    name: Discover Dockerfiles
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v5

      - name: Find Dockerfiles
        id: set-matrix
        run: |
          # Find all Dockerfiles (excluding node_modules)
          dockerfiles=$(find . -name "Dockerfile" -not -path "*/node_modules/*" -not -path "*/.pnpm/*" | jq -R -s -c 'split("\n")[:-1]')
          echo "Found Dockerfiles:"
          echo "$dockerfiles" | jq -r '.[]'
          echo "matrix={\"dockerfile\":$dockerfiles}" >> $GITHUB_OUTPUT

  scan-images:
    name: Scan ${{ matrix.dockerfile }}
    runs-on: ubuntu-latest
    needs: discover-dockerfiles
    if: needs.discover-dockerfiles.outputs.matrix != '{"dockerfile":[]}'
    permissions:
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.discover-dockerfiles.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract service name
        id: service
        run: |
          # Extract service name from Dockerfile path
          service_name=$(echo "${{ matrix.dockerfile }}" | sed 's|^\./||' | sed 's|/Dockerfile$||' | tr '/' '-')
          if [ "$service_name" = "Dockerfile" ]; then
            service_name="root"
          fi
          echo "name=$service_name" >> $GITHUB_OUTPUT
          echo "Service: $service_name"

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: false
          load: true
          tags: prisma-${{ steps.service.outputs.name }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: prisma-${{ steps.service.outputs.name }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results-${{ steps.service.outputs.name }}.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          vuln-type: 'os,library'
          scanners: 'vuln,secret,config'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ steps.service.outputs.name }}.sarif'
          category: 'container-${{ steps.service.outputs.name }}'

      - name: Run Trivy in table format
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: prisma-${{ steps.service.outputs.name }}:${{ github.sha }}
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail on vulnerabilities for now

      - name: Generate vulnerability report
        if: always()
        run: |
          echo "## Container Scan Report: ${{ steps.service.outputs.name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image**: prisma-${{ steps.service.outputs.name }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Dockerfile**: ${{ matrix.dockerfile }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View detailed results in **Security > Code scanning alerts**" >> $GITHUB_STEP_SUMMARY

  scan-summary:
    name: Container Scan Summary
    runs-on: ubuntu-latest
    needs: scan-images
    if: always()
    permissions:
      contents: read
    steps:
      - name: Summary
        run: |
          echo "## 🔒 Container Security Scan Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.scan-images.result }}" == "success" ]; then
            echo "✅ All container images scanned successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.scan-images.result }}" == "failure" ]; then
            echo "⚠️ Container scan completed with findings" >> $GITHUB_STEP_SUMMARY
            echo "Review alerts in **Security > Code scanning alerts**" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ Container scan was skipped or cancelled" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "- Review and patch all CRITICAL and HIGH severity vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- Update base images to latest versions" >> $GITHUB_STEP_SUMMARY
          echo "- Use specific version tags instead of 'latest'" >> $GITHUB_STEP_SUMMARY
          echo "- Minimize image layers and installed packages" >> $GITHUB_STEP_SUMMARY
