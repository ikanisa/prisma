name: Workspace CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: workspace-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    name: Install dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install pnpm
        run: npm install -g pnpm@9

      - name: Install workspace dependencies
        run: pnpm install --frozen-lockfile
      - name: Validate system config
        run: pnpm -w run config:validate
      - name: Generate API types (best-effort)
        run: pnpm run codegen:api || true

  build-gateway:
    name: Build Gateway
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install pnpm
        run: npm install -g pnpm@9

      - name: Install workspace deps
        run: pnpm install --frozen-lockfile

      - name: Build gateway
        run: |
          pnpm --filter @prisma-glow/system-config build || true
          pnpm --filter @prisma-glow/ui build || true
          pnpm --filter @prisma-glow/api-client build || true
          pnpm --filter @prisma-glow/gateway build
      - name: Lint gateway
        run: pnpm --filter @prisma-glow/gateway lint

  build-rag:
    name: Build RAG service
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install pnpm
        run: npm install -g pnpm@9

      - name: Install workspace deps
        run: pnpm install --frozen-lockfile

      - name: Build RAG service
        run: |
          pnpm --filter @prisma-glow/system-config build || true
          pnpm --filter @prisma-glow/ui build || true
          pnpm --filter @prisma-glow/api-client build || true
          pnpm --filter @prisma-glow/rag-service build
      - name: Lint RAG service
        run: pnpm --filter @prisma-glow/rag-service lint

  web-tests:
    name: Frontend lint/tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install pnpm
        run: npm install -g pnpm@9

      - name: Install workspace deps
        run: pnpm install --frozen-lockfile

      - name: Lint (web)
        run: pnpm --filter vite_react_shadcn_ts lint

      - name: Web unit tests
        run: pnpm --filter vite_react_shadcn_ts test

  node-tests:
    name: Node package tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Install pnpm
        run: npm install -g pnpm@9
      - name: Install workspace deps
        run: pnpm install --frozen-lockfile
      - name: Build shared packages
        run: |
          pnpm --filter @prisma-glow/system-config build || true
          pnpm --filter @prisma-glow/api-client build || true

  supabase-functions-tests:
    name: Supabase functions tests (Deno)
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v5
      - name: Install Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v1.x
      - name: Run function unit tests
        run: |
          deno test -A supabase/functions/services/_tests

  gateway-smoke:
    name: Gateway health smoke
    runs-on: ubuntu-latest
    needs: setup
    env:
      PORT: 3000
      OTEL_SERVICE_NAME: gateway
      SERVICE_VERSION: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Install pnpm
        run: npm install -g pnpm@9
      - name: Install workspace deps
        run: pnpm install --frozen-lockfile
      - name: Build gateway
        run: |
          pnpm --filter @prisma-glow/system-config build || true
          pnpm --filter @prisma-glow/gateway build
      - name: Start gateway
        working-directory: apps/gateway
        run: |
          node dist/server.js &
          echo $! > gateway.pid
          for i in {1..20}; do
            curl -fsS http://127.0.0.1:${PORT}/health && break
            sleep 1
          done
      - name: Check /health and /readiness
        run: |
          curl -fsS http://127.0.0.1:${PORT}/health | jq .
          curl -fsS http://127.0.0.1:${PORT}/readiness | jq .
      - name: Stop gateway
        if: always()
        working-directory: apps/gateway
        run: |
          if [ -f gateway.pid ]; then kill $(cat gateway.pid) || true; fi
      - name: Test api-client
        run: pnpm --filter @prisma-glow/api-client test
      - name: Test gateway
        run: pnpm --filter @prisma-glow/gateway test

  fastapi-smoke:
    name: FastAPI health smoke
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
    env:
      SUPABASE_URL: http://localhost:9999
      SUPABASE_SERVICE_ROLE_KEY: local-service-role-key
      SUPABASE_JWT_SECRET: local-jwt-secret
      DATABASE_URL: postgresql+psycopg://postgres:postgres@localhost:5432/postgres
      REDIS_URL: redis://localhost:6379/0
      OTEL_SERVICE_NAME: backend-api
      ENVIRONMENT: test
      SERVICE_VERSION: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f server/requirements.offline.txt ]; then
            echo "Using server/requirements.offline.txt"
            python -m pip install -r server/requirements.offline.txt
          else
            python -m pip install -r server/requirements.txt
          fi

      - name: Start FastAPI (uvicorn)
        run: |
          python -m uvicorn server.health_app:app --host 127.0.0.1 --port 8000 &
          echo $! > api.pid
          for i in {1..30}; do
            curl -fsS http://127.0.0.1:8000/health && break
            sleep 1
          done

      - name: Check /health and /readiness
        run: |
          curl -fsS http://127.0.0.1:8000/health | jq .
          curl -fsS http://127.0.0.1:8000/readiness | jq .

      - name: Stop FastAPI
        if: always()
        run: |
          if [ -f api.pid ]; then kill $(cat api.pid) || true; fi

  backend-pytests:
    name: Backend pytest
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Cache wheelhouse
        uses: actions/cache@v4
        with:
          path: wheelhouse
          key: pip-wheels-${{ runner.os }}-${{ hashFiles('server/requirements.txt') }}

      - name: Build wheels (best-effort)
        run: |
          python -m pip install --upgrade pip
          mkdir -p wheelhouse
          python -m pip wheel -r server/requirements.txt -w wheelhouse || true

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          (python -m pip install --no-index --find-links wheelhouse -r server/requirements.txt) || \
          (if [ -f server/requirements.offline.txt ]; then python -m pip install -r server/requirements.offline.txt; else python -m pip install -r server/requirements.txt; fi)

      - name: Run pytest with coverage
        env:
          PYTHONPATH: .
          SUPABASE_URL: http://localhost:9999
          SUPABASE_SERVICE_ROLE_KEY: local-service-role-key
          SUPABASE_JWT_SECRET: local-jwt-secret
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest --maxfail=1 --disable-warnings \
                 --cov=server --cov-report=term-missing --cov-report=xml:coverage.xml \
                 --junitxml=pytest-junit.xml --cov-fail-under=60 -q

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-xml
          path: coverage.xml

      - name: Upload junit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-junit-xml
          path: pytest-junit.xml

  db-policies:
    name: DB migrations + pgTAP (ephemeral)
    runs-on: ubuntu-latest
    needs: setup
    continue-on-error: false
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v5
      - name: Wait for Postgres
        run: |
          for i in {1..10}; do
            pg_isready -h localhost -p 5432 -U postgres && break
            sleep 2
          done
      - name: Apply migrations
        env:
          PGPASSWORD: postgres
        run: |
          shopt -s nullglob
          for file in $(ls -1 supabase/migrations/*.sql | sort); do
            echo "Applying $file"
            psql -h localhost -U postgres -d postgres -f "$file" || exit 1
          done
      - name: Run pgTAP policy tests (if present)
        if: ${{ hashFiles('scripts/test_policies.sql') != '' }}
        env:
          PGPASSWORD: postgres
        run: |
          psql -h localhost -U postgres -d postgres -f scripts/test_policies.sql

  openapi-client:
    name: OpenAPI codegen + client build
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install pnpm
        run: npm install -g pnpm@9

      - name: Install workspace deps
        run: pnpm install --frozen-lockfile

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install backend deps for OpenAPI export
        run: |
          python -m pip install --upgrade pip
          if [ -f server/requirements.offline.txt ]; then
            python -m pip install -r server/requirements.offline.txt
          else
            python -m pip install -r server/requirements.txt
          fi

      - name: Export OpenAPI + generate types
        run: pnpm -w run codegen:api

      - name: Build API client
        run: pnpm --filter @prisma-glow/api-client build

      - name: Enforce OpenAPI/types drift-free
        run: |
          git add -N packages/api-client/types.ts openapi/fastapi.json || true
          git diff --exit-code -- packages/api-client/types.ts openapi/fastapi.json

  synthetics:
    name: Synthetic API checks
    runs-on: ubuntu-latest
    needs: [build-gateway, build-rag]
    steps:
      - name: Check gateway health
        run: |
          if [ -n "${{ secrets.SYNTHETIC_GATEWAY_URL }}" ]; then
            curl -fsS "${{ secrets.SYNTHETIC_GATEWAY_URL }}/health" | jq . >/dev/null
            curl -fsS "${{ secrets.SYNTHETIC_GATEWAY_URL }}/readiness" | jq . >/dev/null
          else
            echo "SYNTHETIC_GATEWAY_URL not set; skipping"
          fi

      - name: Check RAG health
        run: |
          if [ -n "${{ secrets.SYNTHETIC_RAG_URL }}" ]; then
            curl -fsS "${{ secrets.SYNTHETIC_RAG_URL }}/health" | jq . >/dev/null
            curl -fsS "${{ secrets.SYNTHETIC_RAG_URL }}/readiness" | jq . >/dev/null
          else
            echo "SYNTHETIC_RAG_URL not set; skipping"
          fi

      - name: Check FastAPI health
        run: |
          if [ -n "${{ secrets.SYNTHETIC_API_URL }}" ]; then
            curl -fsS "${{ secrets.SYNTHETIC_API_URL }}/health" | jq . >/dev/null
            curl -fsS "${{ secrets.SYNTHETIC_API_URL }}/readiness" | jq . >/dev/null
          else
            echo "SYNTHETIC_API_URL not set; skipping"
          fi

  k6-smoke:
    name: k6 RAG smoke
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ secrets.K6_RAG_BASE_URL != '' }}
    steps:
      - uses: actions/checkout@v5
      - name: Install k6
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg2 ca-certificates
          curl -s https://repo.k6.io/key.gpg | sudo gpg --dearmor --yes -o /usr/share/keyrings/k6-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://repo.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install -y k6
      - name: Run RAG search smoke
        env:
          RAG_BASE_URL: ${{ secrets.K6_RAG_BASE_URL }}
          ORG_SLUG: ${{ secrets.K6_ORG_SLUG }}
        run: k6 run scripts/perf/k6/rag_search_smoke.js
  backend-smoke:
    name: Backend pytest (smoke)
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f server/requirements.offline.txt ]; then
            python -m pip install -r server/requirements.offline.txt
          else
            python -m pip install -r server/requirements.txt
          fi
      - name: Run smoke tests
        env:
          PYTHONPATH: .
        run: |
          pytest -q \
            tests/test_health_readiness.py \
            tests/test_security_headers.py \
            tests/test_csp_and_cors.py \
            tests/test_request_id.py \
            tests/test_idempotency.py \
            tests/test_rate_limit.py \
            tests/test_autonomy_status.py \
            tests/test_release_controls.py::test_release_controls_reports_pending_actions \
            tests/test_permissions_alignment.py \
            tests/api/test_core_smoke.py
