name: CI Secret Guard

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  secret-scan:
    name: Scan for Client-Side Secrets
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.12.0'
      
      - name: Run secret scanner
        run: |
          echo "üîç Scanning for server-only secrets in client code..."
          node tools/scripts/check-client-secrets.mjs
      
      - name: Report results
        if: failure()
        run: |
          echo "‚ùå Secret scan failed!"
          echo "Server-only secrets were found in client-facing code."
          echo "Review the output above and fix the issues."
          exit 1

  build-check:
    name: Verify Build
    runs-on: ubuntu-latest
    needs: secret-scan
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.12.0'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.3
      
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run monorepo build
        run: |
          echo "üèóÔ∏è Building monorepo..."
          pnpm -w -s build
        env:
          # Provide stub values for build-time checks
          NEXT_PUBLIC_SUPABASE_URL: "https://placeholder.supabase.co"
          NEXT_PUBLIC_SUPABASE_ANON_KEY: "placeholder-anon-key"
      
      - name: Report build status
        if: success()
        run: |
          echo "‚úÖ Build completed successfully!"
          echo "No server secrets leaked into client bundles."

  security-summary:
    name: Security Check Summary
    runs-on: ubuntu-latest
    needs: [secret-scan, build-check]
    if: always()
    
    steps:
      - name: Check job results
        run: |
          echo "Secret Scan: ${{ needs.secret-scan.result }}"
          echo "Build Check: ${{ needs.build-check.result }}"
          
          if [ "${{ needs.secret-scan.result }}" != "success" ]; then
            echo "‚ùå Secret scan failed - review findings above"
            exit 1
          fi
          
          if [ "${{ needs.build-check.result }}" != "success" ]; then
            echo "‚ùå Build check failed - review errors above"
            exit 1
          fi
          
          echo "‚úÖ All security checks passed!"
