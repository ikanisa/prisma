name: SBOM Generation

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:

concurrency:
  group: sbom-${{ github.ref }}
  cancel-in-progress: true

jobs:
  generate-sbom:
    name: Generate Software Bill of Materials
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.19.4
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r server/requirements.txt

      # Install SBOM generation tools
      - name: Install CycloneDX tools
        run: |
          npm install -g @cyclonedx/cyclonedx-npm
          pip install cyclonedx-bom

      # Generate JavaScript/TypeScript SBOM
      - name: Generate JavaScript SBOM (CycloneDX)
        run: |
          npx @cyclonedx/cyclonedx-npm --output-file sbom-javascript.json --output-format JSON --ignore-npm-errors || true
          echo "‚úÖ JavaScript SBOM generated"

      # Generate Python SBOM
      - name: Generate Python SBOM (CycloneDX)
        run: |
          cyclonedx-py requirements -r server/requirements.txt -o sbom-python.json --format json || true
          echo "‚úÖ Python SBOM generated"

      # Validate SBOMs
      - name: Validate SBOMs
        run: |
          if [ -f sbom-javascript.json ]; then
            echo "JavaScript SBOM size: $(wc -c < sbom-javascript.json) bytes"
          fi
          if [ -f sbom-python.json ]; then
            echo "Python SBOM size: $(wc -c < sbom-python.json) bytes"
          fi

      # Upload SBOMs as artifacts
      - name: Upload JavaScript SBOM
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sbom-javascript
          path: sbom-javascript.json
          retention-days: 90

      - name: Upload Python SBOM
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sbom-python
          path: sbom-python.json
          retention-days: 90

      # Attach SBOMs to releases
      - name: Attach SBOMs to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            sbom-javascript.json
            sbom-python.json

      # Generate combined SBOM report
      - name: Generate SBOM summary
        if: always()
        run: |
          echo "# SBOM Generation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f sbom-javascript.json ]; then
            JS_COMPONENTS=$(jq '.components | length' sbom-javascript.json 2>/dev/null || echo "0")
            echo "## JavaScript/TypeScript SBOM" >> $GITHUB_STEP_SUMMARY
            echo "- Components: $JS_COMPONENTS" >> $GITHUB_STEP_SUMMARY
            echo "- File: \`sbom-javascript.json\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f sbom-python.json ]; then
            PY_COMPONENTS=$(jq '.components | length' sbom-python.json 2>/dev/null || echo "0")
            echo "## Python SBOM" >> $GITHUB_STEP_SUMMARY
            echo "- Components: $PY_COMPONENTS" >> $GITHUB_STEP_SUMMARY
            echo "- File: \`sbom-python.json\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "‚úÖ SBOMs generated and uploaded as artifacts" >> $GITHUB_STEP_SUMMARY

  # Dependency audit using SBOMs
  audit-dependencies:
    name: Audit Dependencies
    runs-on: ubuntu-latest
    needs: generate-sbom
    if: always()
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.19.4
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # JavaScript dependency audit
      - name: Audit JavaScript dependencies
        continue-on-error: true
        run: |
          echo "## JavaScript Dependency Audit" >> $GITHUB_STEP_SUMMARY
          pnpm audit --audit-level=moderate --json > audit-js.json || true
          
          if [ -f audit-js.json ]; then
            VULNERABILITIES=$(jq '.metadata.vulnerabilities | to_entries | map(select(.value > 0)) | length' audit-js.json 2>/dev/null || echo "0")
            if [ "$VULNERABILITIES" -gt 0 ]; then
              echo "‚ö†Ô∏è Found vulnerabilities in JavaScript dependencies" >> $GITHUB_STEP_SUMMARY
              jq -r '.advisories | to_entries[] | "- [\(.value.severity | ascii_upcase)] \(.value.title) (\(.value.module_name))"' audit-js.json >> $GITHUB_STEP_SUMMARY 2>/dev/null || true
            else
              echo "‚úÖ No vulnerabilities found in JavaScript dependencies" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      # Python dependency audit
      - name: Audit Python dependencies
        continue-on-error: true
        run: |
          pip install pip-audit
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Python Dependency Audit" >> $GITHUB_STEP_SUMMARY
          
          pip-audit -r server/requirements.txt --format json > audit-py.json || true
          
          if [ -f audit-py.json ]; then
            VULNERABILITIES=$(jq '.vulnerabilities | length' audit-py.json 2>/dev/null || echo "0")
            if [ "$VULNERABILITIES" -gt 0 ]; then
              echo "‚ö†Ô∏è Found vulnerabilities in Python dependencies" >> $GITHUB_STEP_SUMMARY
              jq -r '.vulnerabilities[] | "- [\(.severity | ascii_upcase)] \(.name) \(.version): \(.description)"' audit-py.json >> $GITHUB_STEP_SUMMARY 2>/dev/null || true
            else
              echo "‚úÖ No vulnerabilities found in Python dependencies" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      # Upload audit reports
      - name: Upload audit reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: audit-reports
          path: |
            audit-js.json
            audit-py.json
          retention-days: 30

  # Summary job
  sbom-summary:
    name: SBOM Summary
    runs-on: ubuntu-latest
    needs: [generate-sbom, audit-dependencies]
    if: always()
    steps:
      - name: Check SBOM status
        run: |
          echo "# SBOM Generation & Audit Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "SBOM Generation: ${{ needs.generate-sbom.result }}" >> $GITHUB_STEP_SUMMARY
          echo "Dependency Audit: ${{ needs.audit-dependencies.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üì¶ SBOMs available as workflow artifacts" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.generate-sbom.result }}" == "success" ] && [ "${{ needs.audit-dependencies.result }}" == "success" ]; then
            echo "‚úÖ All checks passed"
          else
            echo "‚ö†Ô∏è Some checks had issues - review artifacts"
          fi
