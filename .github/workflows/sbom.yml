name: "SBOM Generation"

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  release:
    types: [ published ]

concurrency:
  group: sbom-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

jobs:
  generate-sbom:
    name: Generate SBOMs
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - uses: actions/setup-node@v6
        with:
          node-version: 20.19.4
          cache: 'pnpm'

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile
          pip install --upgrade pip
          pip install cyclonedx-bom

      - name: Create SBOM directory
        run: mkdir -p docs/sbom

      - name: Generate Node.js root SBOM (CycloneDX)
        run: |
          npx @cyclonedx/cyclonedx-npm \
            --output-format JSON \
            --output-file docs/sbom/prisma-root-node.json \
            --short-PURLs \
            --package-lock-only

      - name: Generate Python backend SBOM (CycloneDX)
        run: |
          cd server
          cyclonedx-py \
            --format json \
            --output ../docs/sbom/prisma-backend-python.json \
            --requirements requirements.txt
          cd ..

      - name: Generate apps/web SBOM
        if: hashFiles('apps/web/package.json') != ''
        run: |
          cd apps/web
          npx @cyclonedx/cyclonedx-npm \
            --output-format JSON \
            --output-file ../../docs/sbom/prisma-web.json \
            --short-PURLs
          cd ../..

      - name: Generate apps/gateway SBOM
        if: hashFiles('apps/gateway/package.json') != ''
        run: |
          cd apps/gateway
          npx @cyclonedx/cyclonedx-npm \
            --output-format JSON \
            --output-file ../../docs/sbom/prisma-gateway.json \
            --short-PURLs
          cd ../..

      - name: Generate services/rag SBOM
        if: hashFiles('services/rag/package.json') != ''
        run: |
          cd services/rag
          npx @cyclonedx/cyclonedx-npm \
            --output-format JSON \
            --output-file ../../docs/sbom/prisma-rag.json \
            --short-PURLs
          cd ../..

      - name: Generate analytics SBOM
        if: hashFiles('analytics/package.json') != ''
        run: |
          cd analytics
          npx @cyclonedx/cyclonedx-npm \
            --output-format JSON \
            --output-file ../docs/sbom/prisma-analytics.json \
            --short-PURLs
          cd ..

      - name: Generate agent SBOM
        if: hashFiles('agent/package.json') != ''
        run: |
          cd agent
          npx @cyclonedx/cyclonedx-npm \
            --output-format JSON \
            --output-file ../docs/sbom/prisma-agent.json \
            --short-PURLs
          cd ..

      - name: List generated SBOMs
        run: |
          echo "## ðŸ“¦ Generated SBOMs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Format | File |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|------|" >> $GITHUB_STEP_SUMMARY
          for sbom in docs/sbom/*.json; do
            if [ -f "$sbom" ]; then
              size=$(du -h "$sbom" | cut -f1)
              name=$(basename "$sbom")
              echo "| ${name%.json} | CycloneDX JSON | $name ($size) |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          ls -lh docs/sbom/

      - name: Validate SBOMs
        run: |
          echo "Validating SBOM files..."
          for sbom in docs/sbom/*.json; do
            if [ -f "$sbom" ]; then
              echo "Validating $(basename $sbom)..."
              jq empty "$sbom" || exit 1
            fi
          done
          echo "âœ… All SBOMs are valid JSON"

      - name: Upload SBOMs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-files-${{ github.sha }}
          path: docs/sbom/*.json
          retention-days: 90

      - name: Commit SBOMs (on main branch)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/sbom/
          if git diff --staged --quiet; then
            echo "No SBOM changes to commit"
          else
            git commit -m "chore: update SBOMs [skip ci]"
            git push
          fi

      - name: Generate SBOM summary report
        run: |
          echo "## SBOM Generation Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Format**: CycloneDX 1.4+ JSON" >> $GITHUB_STEP_SUMMARY
          echo "**Generated**: $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count total components
          if command -v jq &> /dev/null; then
            total=0
            for sbom in docs/sbom/*.json; do
              if [ -f "$sbom" ]; then
                count=$(jq '.components | length' "$sbom" 2>/dev/null || echo "0")
                total=$((total + count))
              fi
            done
            echo "**Total Components**: $total" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "SBOMs can be used for:" >> $GITHUB_STEP_SUMMARY
          echo "- Supply chain security analysis" >> $GITHUB_STEP_SUMMARY
          echo "- License compliance verification" >> $GITHUB_STEP_SUMMARY
          echo "- Vulnerability tracking" >> $GITHUB_STEP_SUMMARY
          echo "- Dependency audits" >> $GITHUB_STEP_SUMMARY

  generate-spdx:
    name: Generate SPDX SBOMs (Optional)
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
      - uses: actions/checkout@v5

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      - uses: actions/setup-node@v6
        with:
          node-version: 20.19.4
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile

      - name: Generate SPDX SBOM
        run: |
          mkdir -p docs/sbom
          npx @cyclonedx/cyclonedx-npm \
            --output-format XML \
            --output-file docs/sbom/prisma-spdx.xml

      - name: Upload SPDX SBOM
        uses: actions/upload-artifact@v4
        with:
          name: spdx-sbom-${{ github.sha }}
          path: docs/sbom/prisma-spdx.xml
          retention-days: 365
