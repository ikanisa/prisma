/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v1/create-demo-users": {
    /**
     * Create demo users
     * @description Creates a predefined set of demo users and memberships.
     */
    post: {
      responses: {
        /** @description Demo users processed successfully */
        200: {
          content: {
            "application/json": components["schemas"]["CreateDemoUsersResponse"];
          };
        };
        /** @description Error creating demo users */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/v1/seed-data": {
    /**
     * Seed database with initial data
     * @description Seeds the database with an organization, users, clients, engagements, and tasks.
     */
    post: {
      responses: {
        /** @description Seed data created successfully */
        200: {
          content: {
            "application/json": components["schemas"]["SeedDataResponse"];
          };
        };
        /** @description Error seeding data */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    CreateDemoUserResult: {
      /** Format: email */
      email: string;
      /** @enum {string} */
      status: "created" | "already_exists" | "membership_error" | "error";
      /** @enum {string|null} */
      role?: "SYSTEM_ADMIN" | "MANAGER" | "EMPLOYEE" | null;
      error?: string | null;
    };
    CreateDemoUsersResponse: {
      success: boolean;
      message: string;
      results: components["schemas"]["CreateDemoUserResult"][];
    };
    Organization: {
      id: string;
      name: string;
      slug: string;
      brand_primary: string;
      brand_secondary: string;
    };
    SeedDataResponse: {
      success: boolean;
      message: string;
      organization: components["schemas"]["Organization"];
    };
    ErrorResponse: {
      success: boolean;
      error: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
