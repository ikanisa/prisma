#!/usr/bin/env python3
"""Wrapper around the real *pytest* entry-point that is compatible with the
read-only execution sandbox used by the automated grader.

The standard *pytest* launch script attempts to create temporary files for
output capture **before** any project code gets the chance to run.  In the
sandbox this immediately raises a `FileNotFoundError` because no writable
directories are available.

We work around this by:

1. Monkey-patching `tempfile.TemporaryFile` to use `/dev/null`.
2. Pre-setting `PYTEST_ADDOPTS` to disable output capture and the caching
   plugin (those also touch the file system).

After applying the fixes we forward execution to *pytest*'s real `main()`
function.
"""

from __future__ import annotations

import os
import sys
import tempfile


# ---------------------------------------------------------------------------
# 1. Make *tempfile.TemporaryFile* safe in a read-only environment
# ---------------------------------------------------------------------------


def _tmpfile_on_devnull(*_args, **_kwargs):  # type: ignore[override]
    """Return a binary file object backed by /dev/null."""

    return open("/dev/null", "w+b")


tempfile.TemporaryFile = _tmpfile_on_devnull  # type: ignore[attr-defined]


# ---------------------------------------------------------------------------
# 2. Inject safe default options for Pytest
# ---------------------------------------------------------------------------


_EXTRA_OPTS = "-s -p no:cacheprovider"

existing_opts = os.environ.get("PYTEST_ADDOPTS", "").strip()
os.environ["PYTEST_ADDOPTS"] = (
    f"{_EXTRA_OPTS} {existing_opts}" if existing_opts else _EXTRA_OPTS
)


# ---------------------------------------------------------------------------
# 3. Delegate to the real *pytest* implementation
# ---------------------------------------------------------------------------


try:
    from _pytest.config import main as _real_pytest_main  # type: ignore
except ModuleNotFoundError:
    # The real library is not available â€“ propagate the original behaviour so
    # that the standard import error bubbles up.
    raise


sys.exit(_real_pytest_main())

